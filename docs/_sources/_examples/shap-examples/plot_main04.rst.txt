
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples\shap-examples\plot_main04.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_shap-examples_plot_main04.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_shap-examples_plot_main04.py:


Shap - Main 04
==============

.. GENERATED FROM PYTHON SOURCE LINES 6-85




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <IPython.core.display.HTML object>
      0%|                                                                                                                                                                             | 0/1 [00:00<?, ?it/s]    100%|####################################################################################################################################################################| 1/1 [00:00<00:00, 142.86it/s]
    ntree_limit is deprecated, use `iteration_range` or model slicing instead.






|

.. code-block:: default
   :lineno-start: 6

    # coding: utf-8

    # In[1]:

    ### using XGBoost model with SHAP

    import numpy as np
    import pandas as pd
    import xgboost as xgb
    import matplotlib.pyplot as plt

    import shap

    from sklearn.model_selection import train_test_split
    from sklearn.datasets import make_regression

    shap.initjs()


    # In[2]:

    ### make data
    X, y = make_regression(n_samples=100, n_features=5,
        n_informative=3, random_state=0, noise=4.0,
        bias=10.0)
    feature_names = ["x" + str(i+1) for i in range(0,5)]
    data = pd.DataFrame(X, columns=feature_names)
    data["target"] = y


    # In[3]:

    X_train, X_test, y_train, y_test = train_test_split(data[feature_names], ## predictors only
                                                        data.target,
                                                        test_size=0.30,
                                                        random_state=0)


    # In[4]:

    ### create and fit model
    estimator = xgb.XGBRegressor()
    estimator.fit(X_train, y_train)


    # In[5]:

    ## kernel shap sends data as numpy array which has no column names, so we fix it
    def xgb_predict(data_asarray):
        data_asframe =  pd.DataFrame(data_asarray, columns=feature_names)
        return estimator.predict(data_asframe)


    # In[6]:

    #### Kernel SHAP
    X_summary = shap.kmeans(X_train, 10)
    shap_kernel_explainer = shap.KernelExplainer(xgb_predict, X_summary)


    # In[7]:

    ## shapely values with kernel SHAP
    shap_values_single = shap_kernel_explainer.shap_values(X_test.iloc[[5]])
    shap.force_plot(shap_kernel_explainer.expected_value, shap_values_single, X_test.iloc[[5]])


    # In[9]:

    #### Tree SHAP
    shap_tree_explainer = shap.TreeExplainer(estimator)


    # In[10]:

    ## shapely values with Tree SHAP
    shap_values_single = shap_tree_explainer.shap_values(X_test.iloc[[5]])
    shap.force_plot(shap_tree_explainer.expected_value, shap_values_single, X_test.iloc[[5]])

    plt.show()

.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.121 seconds)


.. _sphx_glr_download__examples_shap-examples_plot_main04.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_main04.py <plot_main04.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_main04.ipynb <plot_main04.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
