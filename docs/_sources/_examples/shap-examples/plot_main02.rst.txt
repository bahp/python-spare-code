
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples\shap-examples\plot_main02.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_shap-examples_plot_main02.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_shap-examples_plot_main02.py:


Shap -
=================

.. GENERATED FROM PYTHON SOURCE LINES 6-185



.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /_examples/shap-examples/images/sphx_glr_plot_main02_001.png
          :alt: LogisticRegression
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/shap-examples/images/sphx_glr_plot_main02_002.png
          :alt: DecisionTreeClassifier
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/shap-examples/images/sphx_glr_plot_main02_003.png
          :alt: XGBClassifier
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/shap-examples/images/sphx_glr_plot_main02_004.png
          :alt: ExtraTreesClassifier
          :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.
    <IPython.core.display.HTML object>
    The passed model is not callable and cannot be analyzed directly with the given masker! Model: GaussianNB()

    --------------------------------------------------------------------------------
    Classifier: LogisticRegression()
    Kernel type: <class 'shap.explainers._linear.Linear'>
    shap_values: (375, 3)

    --------------------------------------------------------------------------------
    Classifier: DecisionTreeClassifier(random_state=0)
    Kernel type: <class 'shap.explainers._tree.Tree'>
    shap_values: (375, 3, 2)

    --------------------------------------------------------------------------------
    Classifier: RandomForestClassifier(random_state=0)
    Kernel type: <class 'shap.explainers._tree.Tree'>
    Additivity check failed in TreeExplainer! Please ensure the data matrix you passed to the explainer is the same shape that the model was trained on. If your data shape is correct then please report this on GitHub. This check failed because for one of the samples the sum of the SHAP values was 0.019800, while the model output was 0.010000. If this difference is acceptable you can set check_additivity=False to disable this check.

    --------------------------------------------------------------------------------
    Classifier: XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,
                  colsample_bynode=1, colsample_bytree=1, eta=0.05, gamma=0.2,
                  gpu_id=-1, importance_type='gain', interaction_constraints='',
                  learning_rate=0.0500000007, max_delta_step=0, max_depth=4,
                  min_child_weight=0.005, missing=nan, monotone_constraints='()',
                  n_estimators=100, n_jobs=0, num_parallel_tree=1, random_state=0,
                  reg_alpha=0, reg_lambda=1, scale_pos_weight=1, subsample=1,
                  tree_method='exact', validate_parameters=1, verbosity=None)
    Kernel type: <class 'shap.explainers._tree.Tree'>
    shap_values: (375, 3)
    The passed model is not callable and cannot be analyzed directly with the given masker! Model: MLPClassifier()
    The passed model is not callable and cannot be analyzed directly with the given masker! Model: SVC()

    --------------------------------------------------------------------------------
    Classifier: ExtraTreesClassifier()
    Kernel type: <class 'shap.explainers._tree.Tree'>
    shap_values: (375, 3, 2)

    '\nimport sys\nsys.exit()\n\nimport seaborn as sns\nsv = explainer.shap_values(X_train)\nsv = pd.DataFrame(sv, columns=X.columns)\nsv = sv.stack().reset_index()\nsv[\'val\'] = X_train.stack().reset_index()[0]\n\n#import plotly.express as px\n\n#f = px.strip(data_frame=sv, x=0, y=\'level_1\', color=\'val\')\n#f.show()\n\nprint(sv)\n#sns.swarmplot(data=sv, x=0, y=\'level_1\', color=\'viridis\', palette=\'viridis\')\n#sns.stripplot(data=sv, x=0, y=\'level_1\', color=\'viridis\', palette=\'viridis\')\n#plt.show()\nimport sys\nsys.exit()\n#sns.swarmplot(x=)\n\nimport sys\nsys.exit()\n\n#html = f"<head>{shap.getjs()}</head><body>"\n# Bee swarm\n# .. note: unexpected algorithm matplotlib!\n# .. note: does not return an object!\nplot_bee = shap.plots.beeswarm(shap_values, show=False)\n\n# Sow\nprint("\nBEE")\nprint(plot_bee)\n\n#print(f)\n# Waterfall\n# .. note: not working!\n#shap.plots.waterfall(shap_values[0], max_display=14)\n\n# Force plot\n# .. note: not working!\nplot_force = shap.plots.force(explainer.expected_value,\n    explainer.shap_values(X_train), X_train,\n    matplotlib=False, show=False)\n\n# Show\nprint("\nFORCE:")\nprint(plot_force)\nprint(plot_force.html())\nprint(shap.save_html(\'e.html\', plot_force))\n'





|

.. code-block:: default
   :lineno-start: 6

    # Generic
    import numpy as np
    import pandas as pd
    import matplotlib.pyplot as plt

    # Sklearn
    from sklearn.model_selection import train_test_split
    from sklearn.datasets import load_iris
    from sklearn.datasets import load_breast_cancer
    from sklearn.naive_bayes import GaussianNB
    from sklearn.linear_model import LogisticRegression
    from sklearn.tree import DecisionTreeClassifier
    from sklearn.ensemble import RandomForestClassifier
    from sklearn.svm import SVC
    from sklearn.ensemble import ExtraTreesClassifier
    from sklearn.neural_network import MLPClassifier
    from sklearn.calibration import CalibratedClassifierCV

    # Xgboost
    from xgboost import XGBClassifier

    # ----------------------------------------
    # Load data
    # ----------------------------------------
    # Seed
    seed = 0

    # Load dataset
    bunch = load_iris()
    bunch = load_breast_cancer()
    features = list(bunch['feature_names'])

    # Create DataFrame
    data = pd.DataFrame(data=np.c_[bunch['data'], bunch['target']],
                        columns=features + ['target'])

    # Create X, y
    X = data[bunch['feature_names']]
    y = data['target']

    # Filter
    X = X.iloc[:500, :3]
    y = y.iloc[:500]


    # Split dataset
    X_train, X_test, y_train, y_test = \
        train_test_split(X, y, random_state=seed)


    # ----------------------------------------
    # Classifiers
    # ----------------------------------------
    # Train classifier
    gnb = GaussianNB()
    llr = LogisticRegression()
    dtc = DecisionTreeClassifier(random_state=seed)
    rfc = RandomForestClassifier(random_state=seed)
    xgb = XGBClassifier(
        min_child_weight=0.005,
        eta= 0.05, gamma= 0.2,
        max_depth= 4,
        n_estimators= 100)
    ann = MLPClassifier()
    svm = SVC()
    etc = ExtraTreesClassifier()

    # List
    clfs = [gnb, llr, dtc, rfc, xgb, ann, svm, etc]

    # Fit
    for clf in clfs:
        clf.fit(X_train, y_train)

    # ----------------------------------------
    # Find shap values
    # ----------------------------------------
    # shap.DeepExplainer works with Deep Learning models.
    # shap.KernelExplainer works with all models, though it is
    # slower than other Explainers and it offers an approximation rather than exact Shap values.
    # Import
    import shap

    # Initialise
    shap.initjs()

    # Loop
    for clf in clfs:

        try:
            # Get generic explainer
            explainer = shap.Explainer(clf, X_train)

            # Set generic kernel explainer
            #explainer = shap.KernelExplainer(clf.predict_proba, X_train)

            # Show kernel type
            print("\n" + '-'*80)
            print("Classifier: %s" % clf)
            print("Kernel type: %s" % type(explainer))

            # Get shap values
            #shap_values = explainer(X)
            shap_values = explainer(X_train)

            # Show information
            print("shap_values: %s" % \
                  str(shap_values.shape))

            # Summary plot
            plt.figure()
            plot_summary = shap.summary_plot( \
                explainer.shap_values(X_train),
                X_train, cmap='viridis',
                show=False)

            # Format
            plt.title(clf.__class__.__name__)
            plt.tight_layout()

        except Exception as e:
            print(e)

    # Show
    plt.show()

    """
    import sys
    sys.exit()

    import seaborn as sns
    sv = explainer.shap_values(X_train)
    sv = pd.DataFrame(sv, columns=X.columns)
    sv = sv.stack().reset_index()
    sv['val'] = X_train.stack().reset_index()[0]

    #import plotly.express as px

    #f = px.strip(data_frame=sv, x=0, y='level_1', color='val')
    #f.show()

    print(sv)
    #sns.swarmplot(data=sv, x=0, y='level_1', color='viridis', palette='viridis')
    #sns.stripplot(data=sv, x=0, y='level_1', color='viridis', palette='viridis')
    #plt.show()
    import sys
    sys.exit()
    #sns.swarmplot(x=)

    import sys
    sys.exit()

    #html = f"<head>{shap.getjs()}</head><body>"
    # Bee swarm
    # .. note: unexpected algorithm matplotlib!
    # .. note: does not return an object!
    plot_bee = shap.plots.beeswarm(shap_values, show=False)

    # Sow
    print("\nBEE")
    print(plot_bee)

    #print(f)
    # Waterfall
    # .. note: not working!
    #shap.plots.waterfall(shap_values[0], max_display=14)

    # Force plot
    # .. note: not working!
    plot_force = shap.plots.force(explainer.expected_value,
        explainer.shap_values(X_train), X_train,
        matplotlib=False, show=False)

    # Show
    print("\nFORCE:")
    print(plot_force)
    print(plot_force.html())
    print(shap.save_html('e.html', plot_force))
    """


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  12.935 seconds)


.. _sphx_glr_download__examples_shap-examples_plot_main02.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_main02.py <plot_main02.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_main02.ipynb <plot_main02.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
