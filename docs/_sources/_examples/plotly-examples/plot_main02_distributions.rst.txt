
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples\plotly-examples\plot_main02_distributions.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_plotly-examples_plot_main02_distributions.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_plotly-examples_plot_main02_distributions.py:


Plotly - Distributions
======================

.. GENERATED FROM PYTHON SOURCE LINES 5-183




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Data:
        y_true  y_pred    y_prob
    0        0       1  0.706548
    1        0       0 -0.768177
    2        1       0 -1.898608
    3        1       0  0.577251
    4        0       0  0.763711
    ..     ...     ...       ...
    95       1       0 -0.085900
    96       0       1 -0.480367
    97       1       0 -0.084662
    98       0       1  0.762215
    99       1       0 -1.277950

    [100 rows x 3 columns]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>            <script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG"></script><script type="text/javascript">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: "STIX-Web"}});}</script>                <script type="text/javascript">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>
            <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>                <div id="046b3900-bb98-4bf4-a000-d892045c483d" class="plotly-graph-div" style="height:350px; width:700px;"></div>            <script type="text/javascript">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById("046b3900-bb98-4bf4-a000-d892045c483d")) {                    Plotly.newPlot(                        "046b3900-bb98-4bf4-a000-d892045c483d",                        [{"box": {"visible": true}, "fillcolor": "#6ece58", "line": {"color": "black", "width": 1}, "meanline": {"visible": true}, "name": "tn", "opacity": 0.5, "type": "violin", "x": [-0.7681771838698764, 0.7637108064425615, -2.1335775046489807, -1.4670958175564928, 0.5705970472629207, 2.314213848462445, -1.2452135640808704, -0.1663662848018007, -0.08353521883695032, 0.5494653949033809, -0.17110732146774033, 1.8014466786684353, 0.04476235517085707, 0.3134543518521758, -0.5070018317402063, 0.30148908551077463, 0.809464965248161, 0.45708252163787416, 0.10163949380052656, 0.01866976680411191, 1.1788240071863043, -0.3210336702218742, 0.051333622385225736, 0.3744131794992229, 1.3376602476202006, -0.8900473098532078, 0.9555584854058013], "xaxis": "x", "yaxis": "y"}, {"box": {"visible": true}, "fillcolor": "#1f9e89", "line": {"color": "black", "width": 1}, "meanline": {"visible": true}, "name": "fp", "opacity": 0.5, "type": "violin", "x": [0.7065482300752186, 1.2824277295863926, -0.5868227791144222, 0.586940785860617, -0.48152390695390734, 1.2103119850074855, 0.039120380638147705, -1.4813249203710668, -1.06493064051091, -1.1037906099818184, -1.998423347404394, -0.057959370308753824, -0.1500867531190063, 0.2494735106815057, 1.4211037416365777, 0.46989031234555584, 2.1055752291935006, 0.1008753366530861, 0.7189010616006863, 1.4212947181084257, 0.33110973531081556, -0.48036712665542664, 0.762214545741797], "xaxis": "x2", "yaxis": "y2"}, {"box": {"visible": true}, "fillcolor": "#31688e", "line": {"color": "black", "width": 1}, "meanline": {"visible": true}, "name": "fn", "opacity": 0.5, "type": "violin", "x": [-1.8986075732583165, 0.5772509184655723, 1.7299408199423711, 0.025472316989220038, -0.9951592713145133, 2.122404312013099, 0.4557882253916855, 0.2140424511654421, 0.873113631852317, 0.18759095860083655, 0.44617526466653973, -0.8269908252065586, 0.6500592951117111, 1.7552978658456053, 0.9335833267243884, 0.09304282379458334, -0.9834770344591569, -0.4293552265368127, 0.18118700111238537, -0.9039117356921901, -0.09441743150187504, -0.44390013678547485, 0.9969121812859141, 0.8789635402963998, 1.2365450978188632, 0.10103423825177771, -1.5426894694162743, 0.8108464426621038, -0.41154627090836277, -1.1996181640453485, -0.08590041703320896, -0.08466229185578375, -1.2779504667395594], "xaxis": "x3", "yaxis": "y3"}, {"box": {"visible": true}, "fillcolor": "#fde725", "line": {"color": "black", "width": 1}, "meanline": {"visible": true}, "name": "tp", "opacity": 0.5, "type": "violin", "x": [-2.549700210053691, -0.6928741161906385, -0.34823355528031447, 0.4062238123432174, 0.331150253519646, 0.11337052441087833, -0.04605225298715365, 2.246128887996183, -1.3657388903602194, -2.640349915669322, 0.2835641797975909, 1.2480003400675508, 0.6455328461599791, 1.4055851752276158, 0.3937818352196841, 1.0579186788312642, -0.1331845864095617], "xaxis": "x4", "yaxis": "y4"}],                        {"height": 350, "margin": {"b": 0, "l": 0, "pad": 0, "r": 0, "t": 0}, "paper_bgcolor": "rgba(0,0,0,0)", "plot_bgcolor": "rgba(0,0,0,0)", "template": {"data": {"bar": [{"error_x": {"color": "#2a3f5f"}, "error_y": {"color": "#2a3f5f"}, "marker": {"line": {"color": "#E5ECF6", "width": 0.5}}, "type": "bar"}], "barpolar": [{"marker": {"line": {"color": "#E5ECF6", "width": 0.5}}, "type": "barpolar"}], "carpet": [{"aaxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "baxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "type": "carpet"}], "choropleth": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "choropleth"}], "contour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "contour"}], "contourcarpet": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "contourcarpet"}], "heatmap": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmap"}], "heatmapgl": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmapgl"}], "histogram": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "histogram"}], "histogram2d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2d"}], "histogram2dcontour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2dcontour"}], "mesh3d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "mesh3d"}], "parcoords": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "parcoords"}], "pie": [{"automargin": true, "type": "pie"}], "scatter": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatter"}], "scatter3d": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatter3d"}], "scattercarpet": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattercarpet"}], "scattergeo": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergeo"}], "scattergl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergl"}], "scattermapbox": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattermapbox"}], "scatterpolar": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolar"}], "scatterpolargl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolargl"}], "scatterternary": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterternary"}], "surface": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "surface"}], "table": [{"cells": {"fill": {"color": "#EBF0F8"}, "line": {"color": "white"}}, "header": {"fill": {"color": "#C8D4E3"}, "line": {"color": "white"}}, "type": "table"}]}, "layout": {"annotationdefaults": {"arrowcolor": "#2a3f5f", "arrowhead": 0, "arrowwidth": 1}, "autotypenumbers": "strict", "coloraxis": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "colorscale": {"diverging": [[0, "#8e0152"], [0.1, "#c51b7d"], [0.2, "#de77ae"], [0.3, "#f1b6da"], [0.4, "#fde0ef"], [0.5, "#f7f7f7"], [0.6, "#e6f5d0"], [0.7, "#b8e186"], [0.8, "#7fbc41"], [0.9, "#4d9221"], [1, "#276419"]], "sequential": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "sequentialminus": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]]}, "colorway": ["#636efa", "#EF553B", "#00cc96", "#ab63fa", "#FFA15A", "#19d3f3", "#FF6692", "#B6E880", "#FF97FF", "#FECB52"], "font": {"color": "#2a3f5f"}, "geo": {"bgcolor": "white", "lakecolor": "white", "landcolor": "#E5ECF6", "showlakes": true, "showland": true, "subunitcolor": "white"}, "hoverlabel": {"align": "left"}, "hovermode": "closest", "mapbox": {"style": "light"}, "paper_bgcolor": "white", "plot_bgcolor": "#E5ECF6", "polar": {"angularaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "radialaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "scene": {"xaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "yaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "zaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}}, "shapedefaults": {"line": {"color": "#2a3f5f"}}, "ternary": {"aaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "baxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "caxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "title": {"x": 0.05}, "xaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}, "yaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}}}, "width": 700, "xaxis": {"anchor": "y", "domain": [0.0, 0.45], "range": [0.0, 0.5], "visible": true}, "xaxis2": {"anchor": "y2", "domain": [0.55, 1.0], "range": [0.5, 1.0], "visible": true}, "xaxis3": {"anchor": "y3", "domain": [0.0, 0.45], "range": [0.0, 0.5], "visible": true}, "xaxis4": {"anchor": "y4", "domain": [0.55, 1.0], "range": [0.5, 1.0], "visible": true}, "yaxis": {"anchor": "x", "domain": [0.575, 1.0], "visible": true}, "yaxis2": {"anchor": "x2", "domain": [0.575, 1.0], "visible": true}, "yaxis3": {"anchor": "x3", "domain": [0.0, 0.425], "visible": true}, "yaxis4": {"anchor": "x4", "domain": [0.0, 0.425], "visible": true}},                        {"responsive": true}                    )                };                            </script>        </div>
    </div>
    <br />
    <br />



|

.. code-block:: default
   :lineno-start: 9





    # Libraries
    import plotly.graph_objects as go
    from plotly.graph_objects import Layout
    import plotly.express as px
    import pandas as pd
    import numpy as np


    # -----------------------------------------
    # Helper method
    # -----------------------------------------
    # This method is implemented in pySML.
    def _tp_fp_tn_fn_distributions(y, y_pred, y_prob):
        """This function returns probabilities for each of the confusion
        matrix elements (tp, tn, fp, fn).

        Parameters
        ----------
        y : array-like
          The real categories

        y_pred : array-like
          The predicted categories

        y_prob: array-like
          The predict probabilities

        Returns
        -------
        tp_probs, tn_probs, fp_probs, fn_probs
        """
        # Tags.
        tp_idx = (y_pred == 1) & (y == 1)
        tn_idx = (y_pred == 0) & (y == 0)
        fp_idx = (y_pred == 1) & (y == 0)
        fn_idx = (y_pred == 0) & (y == 1)
        # Show information.
        tp_probs = y_prob[tp_idx]
        tn_probs = y_prob[tn_idx]
        fp_probs = y_prob[fp_idx]
        fn_probs = y_prob[fn_idx]
        # Return
        return tp_probs, tn_probs, fp_probs, fn_probs

    # -----------------------------------------
    # Config
    # -----------------------------------------
    # Colors
    colors = px.colors.qualitative.Plotly
    colors = px.colors.sequential.Plasma_r
    colors = px.colors.sequential.Viridis_r
    #colors = px.colors.sequential.Blues # Issue only 9!

    # -----------------------------------------
    # Data
    # -----------------------------------------
    # Create data
    data = pd.DataFrame()
    data['y_true'] = np.random.randint(2, size=100)
    data['y_pred'] = np.random.randint(2, size=100)
    data['y_prob'] = np.random.normal(loc=0, scale=1, size=100)

    # Set tags
    #data['tag'] =

    # Get distributions
    tp_probs, tn_probs, fp_probs, fn_probs = \
        _tp_fp_tn_fn_distributions(data.y_true,
                                   data.y_pred,
                                   data.y_prob)

    # Visualize
    print("\nData:")
    print(data)

    """
    # Data
    data = {
        'split1': np.vstack((fpr + 0.1, tpr)).T,
        'split2': np.vstack((fpr + 0.2, tpr)).T,
        'split3': np.vstack((fpr + 0.2, tpr)).T,
        'split4': np.vstack((fpr + 0.2, tpr)).T,
        'split5': np.vstack((fpr + 0.2, tpr)).T,
        'split6': np.vstack((fpr + 0.2, tpr)).T,
        'split7': np.vstack((fpr + 0.2, tpr)).T,
        'split8': np.vstack((fpr + 0.2, tpr)).T,
        'split9': np.vstack((fpr + 0.2, tpr)).T,
        'split10': np.vstack((fpr + 0.2, tpr)).T
    }
    """


    # -------------------------------------
    # Visualize
    # -------------------------------------
    # Create figure
    fig = go.Figure()

    # Add diagonal line
    #fig.add_shape(type='line', x0=0, x1=1, y0=0, y1=1,
    #    line=dict(dash='dash', color='gray', width=1),
    #)

    # Plot each split
    #for i, (name, array) in enumerate(data.items()):
    #    # Name of split
    #    name = f"{name}" # (AUC={10:.2f})"
    #    # Add trace
    #    fig.add_trace(go.Scatter(x=array[:, 0],
    #                             y=array[:, 1],
    #                             name=name,
    #                             mode='lines+markers',
    #                             line=dict(color=colors[i],
    #                                       width=0.5)))

    # Import subplots
    from plotly.subplots import make_subplots

    # Create figure
    fig = make_subplots(rows=2, cols=2)
    # subplot_titles=('TP', 'TN', 'FP', 'FN'))

    #

    #  Add traces

    fig.add_trace(go.Violin(x=tn_probs, line_width=1,
        name='tn', line_color='black', fillcolor=colors[2],
        opacity=0.5, meanline_visible=True, box_visible=True), row=1, col=1)
    fig.add_trace(go.Violin(x=fp_probs, line_width=1,
        name='fp', line_color='black', fillcolor=colors[4],
        opacity=0.5, meanline_visible=True, box_visible=True), row=1, col=2)
    fig.add_trace(go.Violin(x=fn_probs, line_width=1,
        name='fn', line_color='black', fillcolor=colors[6],
        opacity=0.5, meanline_visible=True, box_visible=True), row=2, col=1)
    fig.add_trace(go.Violin(x=tp_probs, line_width=1,
        name='tp', line_color='black', fillcolor=colors[0],
        opacity=0.5, meanline_visible=True, box_visible=True), row=2, col=2)

    # Update layout
    fig.update_layout(
        #xaxis_title='False Positive Rate',
        #yaxis_title='True Positive Rate',
        #yaxis=dict(scaleanchor="x", scaleratio=1),
        #xaxis=dict(constrain='domain'),
        width=700, height=350,
        #legend=dict(
        #    x=1.0, y=0.0,  # x=1, y=1.02
        #    orientation="v",
        #    font={'size': 12},
        #    yanchor="bottom",
        #    xanchor="right",
        #),
        margin={
            'l': 0,
            'r': 0,
            'b': 0,
            't': 0,
            'pad': 0
        },
        paper_bgcolor='rgba(0,0,0,0)',  # transparent
        plot_bgcolor='rgba(0,0,0,0)'  # transparent
    )

    fig.update_xaxes(visible=True, range=[0.0, 0.5], row=1, col=1)
    fig.update_xaxes(visible=True, range=[0.5, 1.0], row=1, col=2)
    fig.update_xaxes(visible=True, range=[0.0, 0.5], row=2, col=1)
    fig.update_xaxes(visible=True, range=[0.5, 1.0], row=2, col=2)

    fig.update_yaxes(visible=True)


    # Show
    #fig.show()
    fig

.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.148 seconds)


.. _sphx_glr_download__examples_plotly-examples_plot_main02_distributions.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_main02_distributions.py <plot_main02_distributions.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_main02_distributions.ipynb <plot_main02_distributions.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
