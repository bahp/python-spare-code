
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples\pandas\plot_format02.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_pandas_plot_format02.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_pandas_plot_format02.py:


Pandas - Format 02
======================

Example

.. GENERATED FROM PYTHON SOURCE LINES 7-116




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

        1/  300. Patient '0'
       11/  300. Patient '10'
       21/  300. Patient '20'
       31/  300. Patient '30'
       41/  300. Patient '40'
       51/  300. Patient '50'
       61/  300. Patient '60'
       71/  300. Patient '70'
       81/  300. Patient '80'
       91/  300. Patient '90'
      101/  300. Patient '100'
            id   max_f_0   max_f_1   max_f_2   max_f_3   max_f_4   max_f_5   max_f_6   max_f_7   max_f_8  ...   min_f_1   min_f_2   min_f_3   min_f_4   min_f_5   min_f_6   min_f_7   min_f_8   min_f_9  min_id
    0      0.0  0.999633  0.998130  0.999729  0.998829  0.999361  0.998499  0.996885  0.999555  0.997927  ...  0.003374  0.006764  0.000098  0.000558  0.003654  0.001582  0.005400  0.004160  0.001841     0.0
    1      1.0  0.997072  0.997049  0.999003  0.999389  0.997656  0.999930  0.988393  0.999331  0.999458  ...  0.001671  0.005157  0.000476  0.000638  0.012274  0.003047  0.001203  0.000582  0.000351     1.0
    2      2.0  0.999206  0.998551  0.999503  0.999853  0.997187  0.998952  0.998621  0.999613  0.998304  ...  0.002298  0.008283  0.000792  0.000252  0.000979  0.005034  0.000625  0.002326  0.000127     2.0
    3      3.0  0.997382  0.999080  0.997392  0.994726  0.999275  0.993862  0.998254  0.997872  0.997919  ...  0.000703  0.001525  0.001613  0.000290  0.003119  0.001700  0.000304  0.002256  0.001445     3.0
    4      4.0  0.999650  0.999668  0.999410  0.999627  0.998164  0.996549  0.999365  0.999736  0.996952  ...  0.000042  0.001470  0.002658  0.002671  0.000741  0.001787  0.000493  0.001368  0.006303     4.0
    ..     ...       ...       ...       ...       ...       ...       ...       ...       ...       ...  ...       ...       ...       ...       ...       ...       ...       ...       ...       ...     ...
    96    96.0  0.992559  0.998598  0.997630  0.995930  0.997761  0.996273  0.999494  0.997695  0.997776  ...  0.001302  0.000020  0.002196  0.001101  0.002469  0.001170  0.003126  0.002452  0.000450    96.0
    97    97.0  0.999297  0.999160  0.999234  0.995037  0.999031  0.998286  0.997153  0.993915  0.999586  ...  0.001151  0.001597  0.000303  0.000063  0.000354  0.001499  0.001046  0.000392  0.002982    97.0
    98    98.0  0.995952  0.993939  0.999051  0.999999  0.998280  0.998824  0.994182  0.999978  0.996188  ...  0.000364  0.002423  0.000193  0.001887  0.004619  0.000241  0.000535  0.000046  0.000672    98.0
    99    99.0  0.999164  0.999506  0.999730  0.999918  0.999906  0.999647  0.998606  0.997859  0.996830  ...  0.000342  0.000820  0.004568  0.002833  0.002604  0.000539  0.000044  0.000258  0.000811    99.0
    100  100.0  0.996888  0.999454  0.999822  0.999515  0.996670  0.996856  0.998218  0.998821  0.999573  ...  0.001464  0.003399  0.002190  0.000481  0.000153  0.000152  0.005893  0.003862  0.002874   100.0

    [101 rows x 23 columns]






|

.. code-block:: default
   :lineno-start: 8


    # Generic
    import warnings
    import numpy as np
    import pandas as pd 

    # Ignore warnings
    warnings.simplefilter("ignore")

    def load_data():
    	return pd.read_csv('./laboratory.csv', parse_dates=['date'])

    def create_data():
    	""""""
    	# Configuration
    	ROWS, COLS = 150000, 10
    	PATIENTS = 300

    	# Create random values
    	features = np.random.random_sample((ROWS, COLS))
    	patients = np.random.randint(PATIENTS, size=(ROWS, 1))

    	# Create DataFrame
    	df = pd.DataFrame(data=features)
    	df = df.add_prefix('f_')
    	df['id'] = patients

    	# Return
    	return df


    # -----------------------
    # Read data
    # -----------------------
    # Read data
    #data = pd.read_csv('./laboratory.csv', parse_dates=['date'])

    data = create_data()


    # -----------------------
    # Format
    # -----------------------
    # Configuration
    show_progress_every = 10 # Number of patients
    break_loop_after = 100  # Number of patients or None

    # Create empty outcome
    results = pd.DataFrame()

    # Groups
    groups = data.groupby(by='id')

    # Step by step (16270 groups!)
    for i, (k, g) in enumerate(groups):
    	# Show information
    	if (i % show_progress_every) == 0:
    		print("%5s/%5s. Patient '%s'" % (i+1, len(groups), k))

    	# Show dataframe
    	#print(g)

    	# Sort by dates (if needed)

    	# Fill empty values
    	#g.fillna(method='backfill', inplace=True)

    	# Compute statistics
    	# ------------------
    	# .. note: Forward/backward filling does not affect
    	#          the max/min but it affects the mean or
    	#          median.
    	#
    	# .. note: You could also create a map with all the 
    	#          functions you want to apply instead of 
    	#          using describe. This is useful if you need 
    	#          specific stats

    	# Get the common stats
    	#d = g.describe()

    	# Get specific stats for all columns	
    	d = g.agg({c: ['max', 'min'] for c in g.columns})

    	# Stack the describe outcome 
    	d = d.stack()
    	d.index = ['_'.join(e) for e in d.index.tolist()]
    	d['id'] = k                  # patient identifier
    	#d['date'] = min(g['date'])   # admission date

    	# Append result
    	results = results.append(d, ignore_index=True)

    	# Break clause for testing
    	#if break_loop_after is not None:
    	if i==break_loop_after:
    		break


    # Show columns
    #print(results.columns.values)

    print(results)

    # Show results (partially)
    #print(results[['id', 'date', 'max_wcc']])

    # .. note: Once it works as you want, you can try to do it
    #          in one single line and compare the results to 
    #          verify that it is correct.

.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.809 seconds)


.. _sphx_glr_download__examples_pandas_plot_format02.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_format02.py <plot_format02.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_format02.ipynb <plot_format02.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
