
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples\pandas\plot_format02.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_pandas_plot_format02.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_pandas_plot_format02.py:


Format 02 -
======================

Aggregate patient's data in a single row.

.. GENERATED FROM PYTHON SOURCE LINES 7-116




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

        1/  300. Patient '0'
       11/  300. Patient '10'
       21/  300. Patient '20'
       31/  300. Patient '30'
       41/  300. Patient '40'
       51/  300. Patient '50'
       61/  300. Patient '60'
       71/  300. Patient '70'
       81/  300. Patient '80'
       91/  300. Patient '90'
      101/  300. Patient '100'
                  0         1         2         3         4         5         6         7         8         9    ...        91         92         93         94         95         96         97         98         99          100
    max_f_0  0.995353  0.996903  0.998782  0.996913  0.999360  0.999706  0.996684  0.999575  0.999354  0.999538  ...   0.996824   0.999781   0.999467   0.997364   0.999971   0.999587   0.999474   0.999822   0.998161    0.999598
    max_f_1  0.999286  0.999732  0.997628  0.998865  0.990338  0.998618  0.999557  0.995397  0.996983  0.999821  ...   0.994444   0.997375   0.998592   0.996130   0.994740   0.999285   0.999646   0.998837   0.999284    0.994443
    max_f_2  0.999085  0.998668  0.999334  0.996248  0.999564  0.996083  0.999981  0.999194  0.995852  0.999845  ...   0.999810   0.998964   0.999301   0.997050   0.998688   0.999009   0.999947   0.999827   0.998647    0.993079
    max_f_3  0.997174  0.999169  0.998447  0.999382  0.998912  0.999500  0.991765  0.999459  0.994469  0.999524  ...   0.999794   0.993421   0.999694   0.999803   0.999973   0.999410   0.999913   0.997226   0.999780    0.998888
    max_f_4  0.995141  0.999371  0.997757  0.999921  0.998135  0.999595  0.998459  0.999275  0.998648  0.999313  ...   0.997134   0.999460   0.996749   0.998531   0.996313   0.998530   0.995525   0.997822   0.996575    0.999078
    max_f_5  0.997160  0.999685  0.997696  0.997424  0.995194  0.999157  0.997268  0.999123  0.997583  0.995349  ...   0.998823   0.996498   0.998678   0.998839   0.999927   0.989970   0.998354   0.999201   0.999603    0.999689
    max_f_6  0.999137  0.997050  0.996438  0.989409  0.997229  0.999140  0.999338  0.998632  0.999730  0.995988  ...   0.997896   0.999699   0.993926   0.997280   0.997602   0.996565   0.998196   0.999839   0.997797    0.998461
    max_f_7  0.999514  0.990874  0.997312  0.999554  0.995765  0.996989  0.998780  0.996634  0.999837  0.998461  ...   0.997374   0.998673   0.999762   0.999073   0.998113   0.999926   0.993994   0.999725   0.997955    0.999715
    max_f_8  0.999988  0.999348  0.996921  0.997731  0.998785  0.999795  0.999536  0.999677  0.997378  0.998393  ...   0.999021   0.993326   0.996247   0.999450   0.995928   0.999598   0.999937   0.999760   0.999953    0.998295
    max_f_9  0.993033  0.998545  0.994935  0.999357  0.997912  0.998629  0.996774  0.994409  0.997467  0.997784  ...   0.999449   0.998892   0.999166   0.997319   0.999487   0.999424   0.998619   0.997665   0.996816    0.999949
    max_id   0.000000  1.000000  2.000000  3.000000  4.000000  5.000000  6.000000  7.000000  8.000000  9.000000  ...  91.000000  92.000000  93.000000  94.000000  95.000000  96.000000  97.000000  98.000000  99.000000  100.000000
    min_f_0  0.000241  0.008697  0.000048  0.000066  0.000385  0.001020  0.005126  0.000081  0.001129  0.013850  ...   0.002124   0.001266   0.002073   0.003760   0.000757   0.000163   0.001607   0.002740   0.003142    0.000933
    min_f_1  0.000770  0.000091  0.002616  0.001045  0.001265  0.000136  0.000380  0.002212  0.000849  0.003887  ...   0.003571   0.000511   0.002037   0.001109   0.004482   0.000547   0.011257   0.003835   0.001414    0.000096
    min_f_2  0.000444  0.003923  0.000407  0.001463  0.000015  0.002721  0.001562  0.000485  0.002207  0.001742  ...   0.000227   0.000136   0.001707   0.004725   0.001374   0.006806   0.000975   0.001130   0.001502    0.003277
    min_f_3  0.000818  0.002490  0.001761  0.014147  0.004334  0.001168  0.000450  0.006350  0.000030  0.000767  ...   0.000213   0.001199   0.000181   0.000571   0.008428   0.002538   0.002022   0.004363   0.002008    0.002166
    min_f_4  0.000211  0.000475  0.000494  0.003353  0.000858  0.002635  0.001440  0.000123  0.002474  0.002981  ...   0.002317   0.001929   0.002421   0.002230   0.006293   0.002962   0.006507   0.002182   0.001134    0.000533
    min_f_5  0.011953  0.002716  0.000494  0.002160  0.001695  0.004432  0.000578  0.001028  0.005555  0.001765  ...   0.001032   0.000427   0.002489   0.002001   0.000236   0.000135   0.000310   0.000301   0.000207    0.001456
    min_f_6  0.000546  0.007073  0.003372  0.000401  0.000315  0.001602  0.000006  0.003315  0.001740  0.002517  ...   0.000851   0.000891   0.004067   0.001779   0.005252   0.002015   0.000049   0.001304   0.000972    0.001647
    min_f_7  0.001216  0.001523  0.003686  0.001081  0.002453  0.000106  0.002697  0.002094  0.000066  0.001214  ...   0.001239   0.000538   0.000868   0.000945   0.000343   0.000349   0.000581   0.000263   0.004091    0.001879
    min_f_8  0.006075  0.000089  0.000617  0.000552  0.003787  0.001269  0.001797  0.005402  0.000824  0.000046  ...   0.001739   0.002590   0.000213   0.000480   0.001335   0.001801   0.005573   0.005879   0.000555    0.005584
    min_f_9  0.004196  0.000500  0.001561  0.000424  0.001764  0.002411  0.001422  0.000896  0.001686  0.002868  ...   0.000465   0.014520   0.004846   0.000386   0.000061   0.002660   0.003293   0.001033   0.009193    0.001870
    min_id   0.000000  1.000000  2.000000  3.000000  4.000000  5.000000  6.000000  7.000000  8.000000  9.000000  ...  91.000000  92.000000  93.000000  94.000000  95.000000  96.000000  97.000000  98.000000  99.000000  100.000000
    id       0.000000  1.000000  2.000000  3.000000  4.000000  5.000000  6.000000  7.000000  8.000000  9.000000  ...  91.000000  92.000000  93.000000  94.000000  95.000000  96.000000  97.000000  98.000000  99.000000  100.000000

    [23 rows x 101 columns]






|

.. code-block:: default
   :lineno-start: 8


    # Generic
    import warnings
    import numpy as np
    import pandas as pd 

    # Ignore warnings
    warnings.simplefilter("ignore")

    def load_data():
    	return pd.read_csv('./laboratory.csv', parse_dates=['date'])

    def create_data():
    	""""""
    	# Configuration
    	ROWS, COLS = 150000, 10
    	PATIENTS = 300

    	# Create random values
    	features = np.random.random_sample((ROWS, COLS))
    	patients = np.random.randint(PATIENTS, size=(ROWS, 1))

    	# Create DataFrame
    	df = pd.DataFrame(data=features)
    	df = df.add_prefix('f_')
    	df['id'] = patients

    	# Return
    	return df


    # -----------------------
    # Read data
    # -----------------------
    # Read data
    #data = pd.read_csv('./laboratory.csv', parse_dates=['date'])

    data = create_data()


    # -----------------------
    # Format
    # -----------------------
    # Configuration
    show_progress_every = 10 # Number of patients
    break_loop_after = 100  # Number of patients or None

    # Create empty outcome
    results = pd.DataFrame()

    # Groups
    groups = data.groupby(by='id')

    # Step by step (16270 groups!)
    for i, (k, g) in enumerate(groups):
    	# Show information
    	if (i % show_progress_every) == 0:
    		print("%5s/%5s. Patient '%s'" % (i+1, len(groups), k))

    	# Show dataframe
    	#print(g)

    	# Sort by dates (if needed)

    	# Fill empty values
    	#g.fillna(method='backfill', inplace=True)

    	# Compute statistics
    	# ------------------
    	# .. note: Forward/backward filling does not affect
    	#          the max/min but it affects the mean or
    	#          median.
    	#
    	# .. note: You could also create a map with all the 
    	#          functions you want to apply instead of 
    	#          using describe. This is useful if you need 
    	#          specific stats

    	# Get the common stats
    	#d = g.describe()

    	# Get specific stats for all columns	
    	d = g.agg({c: ['max', 'min'] for c in g.columns})

    	# Stack the describe outcome 
    	d = d.stack()
    	d.index = ['_'.join(e) for e in d.index.tolist()]
    	d['id'] = k                  # patient identifier
    	#d['date'] = min(g['date'])   # admission date

    	# Append result
    	results = pd.concat([results, d], ignore_index=True, axis=1)

    	# Break clause for testing
    	#if break_loop_after is not None:
    	if i==break_loop_after:
    		break


    # Show columns
    #print(results.columns.values)

    print(results)

    # Show results (partially)
    #print(results[['id', 'date', 'max_wcc']])

    # .. note: Once it works as you want, you can try to do it
    #          in one single line and compare the results to 
    #          verify that it is correct.

.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.875 seconds)


.. _sphx_glr_download__examples_pandas_plot_format02.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_format02.py <plot_format02.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_format02.ipynb <plot_format02.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
