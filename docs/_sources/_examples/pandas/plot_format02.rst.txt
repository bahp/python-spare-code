
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples\pandas\plot_format02.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_pandas_plot_format02.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_pandas_plot_format02.py:


02. Aggregation
======================

Aggregate patient's data in a single row.

.. GENERATED FROM PYTHON SOURCE LINES 7-116




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

        1/  300. Patient '0'
       11/  300. Patient '10'
       21/  300. Patient '20'
       31/  300. Patient '30'
       41/  300. Patient '40'
       51/  300. Patient '50'
       61/  300. Patient '60'
       71/  300. Patient '70'
       81/  300. Patient '80'
       91/  300. Patient '90'
      101/  300. Patient '100'
                  0         1         2         3         4         5         6    ...        94         95         96         97            98         99          100
    max_f_0  0.999396  0.999916  0.998421  0.999023  0.999431  0.997913  0.997867  ...   0.995800   0.998766   0.998735   0.998977  9.976324e-01   0.991941    0.998891
    max_f_1  0.999436  0.997938  0.999444  0.999926  0.998605  0.995591  0.999488  ...   0.998451   0.999851   0.995863   0.998557  9.971850e-01   0.992134    0.994609
    max_f_2  0.996942  0.998603  0.998015  0.995936  0.993793  0.999142  0.998222  ...   0.999786   0.996589   0.994065   0.998225  9.991617e-01   0.999670    0.997319
    max_f_3  0.999834  0.999682  0.994780  0.998556  0.999465  0.997353  0.998338  ...   0.998686   0.999914   0.999150   0.996743  9.990733e-01   0.998847    0.998722
    max_f_4  0.998651  0.999780  0.999122  0.998361  0.998318  0.999930  0.999977  ...   0.998310   0.999673   0.993660   0.999548  9.964524e-01   0.989648    0.995319
    max_f_5  0.997312  0.998754  0.998809  0.997283  0.999338  0.998211  0.999350  ...   0.994484   0.999991   0.998394   0.999013  9.987785e-01   0.999315    0.999718
    max_f_6  0.999305  0.999753  0.999907  0.996438  0.999014  0.998860  0.999388  ...   0.993969   0.997109   0.999011   0.997794  9.979976e-01   0.999533    0.999551
    max_f_7  0.998653  0.999945  0.996116  0.990794  0.999622  0.994723  0.998606  ...   0.997663   0.999109   0.999812   0.999841  9.911849e-01   0.999201    0.996596
    max_f_8  0.996390  0.997969  0.997322  0.997818  0.997749  0.997650  0.999295  ...   0.999591   0.998346   0.991803   0.999475  9.987050e-01   0.998879    0.997566
    max_f_9  0.999218  0.985888  0.999487  0.995975  0.993271  0.998376  0.996804  ...   0.996486   0.998782   0.998949   0.999446  9.992994e-01   0.999501    0.999945
    max_id   0.000000  1.000000  2.000000  3.000000  4.000000  5.000000  6.000000  ...  94.000000  95.000000  96.000000  97.000000  9.800000e+01  99.000000  100.000000
    min_f_0  0.006612  0.005354  0.001194  0.001723  0.000572  0.001657  0.000188  ...   0.000205   0.003465   0.002174   0.000060  4.641318e-04   0.003149    0.012990
    min_f_1  0.000657  0.009678  0.003852  0.005713  0.000374  0.001143  0.000361  ...   0.002627   0.001206   0.000043   0.000317  2.485503e-04   0.000097    0.001037
    min_f_2  0.004106  0.002320  0.000009  0.001365  0.002018  0.003379  0.005193  ...   0.001478   0.000453   0.003230   0.000050  2.346579e-03   0.004809    0.000394
    min_f_3  0.001637  0.000820  0.001093  0.000946  0.002665  0.000166  0.006021  ...   0.003038   0.002047   0.003247   0.000594  3.530193e-03   0.001577    0.000516
    min_f_4  0.001236  0.000880  0.001519  0.002644  0.002253  0.004729  0.001125  ...   0.000415   0.004389   0.003957   0.001519  1.975811e-03   0.000841    0.000739
    min_f_5  0.007147  0.001026  0.000837  0.000039  0.000605  0.002531  0.001165  ...   0.002278   0.000446   0.003155   0.002953  4.909229e-03   0.000199    0.001498
    min_f_6  0.001654  0.000702  0.000005  0.002121  0.002108  0.003364  0.001350  ...   0.001140   0.001168   0.004485   0.001613  5.254541e-08   0.001442    0.000083
    min_f_7  0.001018  0.000803  0.010409  0.002907  0.003485  0.002294  0.004204  ...   0.001379   0.001513   0.005337   0.003602  5.742431e-04   0.002944    0.001785
    min_f_8  0.004807  0.000146  0.002599  0.000593  0.001437  0.000679  0.000507  ...   0.001697   0.001800   0.001131   0.002471  1.088023e-03   0.000636    0.001334
    min_f_9  0.001023  0.000182  0.000290  0.000437  0.000455  0.008994  0.002949  ...   0.000819   0.003768   0.000417   0.003779  1.259451e-03   0.001748    0.001426
    min_id   0.000000  1.000000  2.000000  3.000000  4.000000  5.000000  6.000000  ...  94.000000  95.000000  96.000000  97.000000  9.800000e+01  99.000000  100.000000
    id       0.000000  1.000000  2.000000  3.000000  4.000000  5.000000  6.000000  ...  94.000000  95.000000  96.000000  97.000000  9.800000e+01  99.000000  100.000000

    [23 rows x 101 columns]






|

.. code-block:: default
   :lineno-start: 8


    # Generic
    import warnings
    import numpy as np
    import pandas as pd 

    # Ignore warnings
    warnings.simplefilter("ignore")

    def load_data():
    	return pd.read_csv('./laboratory.csv', parse_dates=['date'])

    def create_data():
    	""""""
    	# Configuration
    	ROWS, COLS = 150000, 10
    	PATIENTS = 300

    	# Create random values
    	features = np.random.random_sample((ROWS, COLS))
    	patients = np.random.randint(PATIENTS, size=(ROWS, 1))

    	# Create DataFrame
    	df = pd.DataFrame(data=features)
    	df = df.add_prefix('f_')
    	df['id'] = patients

    	# Return
    	return df


    # -----------------------
    # Read data
    # -----------------------
    # Read data
    #data = pd.read_csv('./laboratory.csv', parse_dates=['date'])

    data = create_data()


    # -----------------------
    # Format
    # -----------------------
    # Configuration
    show_progress_every = 10 # Number of patients
    break_loop_after = 100  # Number of patients or None

    # Create empty outcome
    results = pd.DataFrame()

    # Groups
    groups = data.groupby(by='id')

    # Step by step (16270 groups!)
    for i, (k, g) in enumerate(groups):
    	# Show information
    	if (i % show_progress_every) == 0:
    		print("%5s/%5s. Patient '%s'" % (i+1, len(groups), k))

    	# Show dataframe
    	#print(g)

    	# Sort by dates (if needed)

    	# Fill empty values
    	#g.fillna(method='backfill', inplace=True)

    	# Compute statistics
    	# ------------------
    	# .. note: Forward/backward filling does not affect
    	#          the max/min but it affects the mean or
    	#          median.
    	#
    	# .. note: You could also create a map with all the 
    	#          functions you want to apply instead of 
    	#          using describe. This is useful if you need 
    	#          specific stats

    	# Get the common stats
    	#d = g.describe()

    	# Get specific stats for all columns	
    	d = g.agg({c: ['max', 'min'] for c in g.columns})

    	# Stack the describe outcome 
    	d = d.stack()
    	d.index = ['_'.join(e) for e in d.index.tolist()]
    	d['id'] = k                  # patient identifier
    	#d['date'] = min(g['date'])   # admission date

    	# Append result
    	results = pd.concat([results, d], ignore_index=True, axis=1)

    	# Break clause for testing
    	#if break_loop_after is not None:
    	if i==break_loop_after:
    		break


    # Show columns
    #print(results.columns.values)

    print(results)

    # Show results (partially)
    #print(results[['id', 'date', 'max_wcc']])

    # .. note: Once it works as you want, you can try to do it
    #          in one single line and compare the results to 
    #          verify that it is correct.

.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.868 seconds)


.. _sphx_glr_download__examples_pandas_plot_format02.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_format02.py <plot_format02.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_format02.ipynb <plot_format02.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
