
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples/pysml-dataframe-splitter/main.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_pysml-dataframe-splitter_main.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_pysml-dataframe-splitter_main.py:


Main
=============

Example

.. GENERATED FROM PYTHON SOURCE LINES 7-195

.. code-block:: default
   :lineno-start: 7

    # Libraries
    import pandas as pd
    import numpy as np

    # Libraries specific
    from sklearn.model_selection import train_test_split
    from sklearn.model_selection import StratifiedKFold
    from sklearn.model_selection import KFold

    #

    _DEFAULT_SPLITTERS = {
        'skfold10': StratifiedKFold(n_splits=10, shuffle=True),
        'skfold5': StratifiedKFold(n_splits=5, shuffle=True),
        'skfold2': StratifiedKFold(n_splits=2, shuffle=True),
    }



    def split_dataframe_hos_cvs(dataframe, inplace=False, **kwargs):
        """This method labels the dataframe hos and cvs sets.

        Parameters
        ----------
        dataframe: np.array or pd.DataFrame
            The data to be divided into HOS/CVS.

        Returns
        -------
        np.array:
            The outcome is a numpy array with rows labelled as
            cvs (cross-validation set) and hos (hold-out set).
            :param data:
            :param inplace:
        """
        # Length
        n = dataframe.shape[0]

        # Split in hos and training sets
        cvs, hos = train_test_split(np.arange(n), **kwargs)

        # Create result
        empty = np.array([None]*n)
        empty[cvs] = 'cvs'
        empty[hos] = 'hos'

        # Include
        if inplace and isinstance(dataframe, pd.DataFrame):
            dataframe['sets'] = empty

        # Return
        return empty


    def split_dataframe_cvs_folds(dataframe, splitter, selected_rows=None, **kwargs):
        """This method labels the different folds.

            .. note:

        Parameters
        ----------
        dataframe: np.array or pd.DataFrame
            The data to be divided into folds.

        splitter: str or splitter
            The splitter which can be an str or an splitter from the
            sklearn library which implementeds the method split.

        selected_rows: array of bools.
            The rows to be considered to create the folds. Note that if
            y is passed (for stratified cross validation) y will also be
            filtered by these rows.

        kwargs:

        Returns
        -------
        pd.DataFrame:
            The outcome is the same dataframe with an additional column
            <set> with the values cvs (cross-validation set) and hos
            (hold-out set).
        """
        if isinstance(splitter, str):
            splitter = _DEFAULT_SPLITTERS[splitter]

        # Define X and y
        #X = dataframe[dataframe.sets == 'cvs'].index.to_numpy()
        #y = dataframe[dataframe.sets == 'cvs'][label]

        # Shape
        r, c = dataframe.shape

        # No rows selected (all by default)
        if selected_rows is None:
            selected_rows = np.full(r, True, dtype=bool)

        # Select rows from y
        if 'y' in kwargs:
            if kwargs['y'] is not None:
                kwargs['y'] = kwargs['y'][selected_rows]

        # Create indexes to use for splitting
        idxs = np.arange(r)[selected_rows].reshape(-1, 1)

        # Get splits of idxs
        splits = splitter.split(idxs, **kwargs)

        # Loop and add
        for i, (train, test) in enumerate(splits):
            dataframe['set_iter_{0}'.format(i)] = None
            dataframe.loc[idxs[train].flatten(), 'set_iter_{0}'.format(i)] = 'train'
            dataframe.loc[idxs[test].flatten(), 'set_iter_{0}'.format(i)] = 'test'




    def split_dataframe_completeness(dataframe):
        pass


    # --------------------------------------------------
    # Main
    # --------------------------------------------------
    # Read data
    dataframe = pd.read_csv('./dataset.csv')

    # Show
    print(dataframe)


    # Split in Hos and CVS sets
    #dataframe = split_dataframe_hos_cvs(dataframe)
    #dataframe = split_dataframe_cvs_folds(dataframe, splitter='skfold10',
    #                                      label='micro_confirmed')

    # Split in HOS and CVS sets
    split_dataframe_hos_cvs(dataframe, inplace=True)

    print (dataframe)

    # Split in folds
    split_dataframe_cvs_folds(dataframe,
                    splitter='skfold5',
                    y=dataframe.micro_confirmed,
                    selected_rows=(dataframe.sets == 'cvs'))

    # Show
    print(dataframe)


    class DataframeHOSCSVSplitter():
        """

        """
        col_name = 'sets'
        cvs_name = 'CSV'
        hos_name = 'HOS'

        def __init__(self, col_name=None,
                     cvs_name=None,
                     hos_name=None):
            """

            :param col_name:
            :param cvs_name:
            :param hos_name:
            """
            if col_name is not None:
                self.col_name = col_name
            if cvs_name is not None:
                self.cvs_name = cvs_name
            if hos_name is not None:
                self.hos_name = hos_name

        def split(self, dataframe, **kwargs):
            """

            """
            # Split
            cvs, hos = train_test_split(dataframe.index.to_numpy(), **kwargs)

            # Fill dataset
            dataframe[self.col_name] = None
            dataframe.loc[cvs, self.col_name] = self.cvs_name
            dataframe.loc[hos, self.col_name] = self.hos_name

            # Return
            return dataframe


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download__examples_pysml-dataframe-splitter_main.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: main.py <main.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: main.ipynb <main.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
