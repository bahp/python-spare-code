
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples\scikits\plot_data_wrapper.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_scikits_plot_data_wrapper.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_scikits_plot_data_wrapper.py:


Dummy Data Wrapper
==================

Dummy data wrapper

.. warning:: Non sense!

.. GENERATED FROM PYTHON SOURCE LINES 10-130




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Features:
                 0         1         2         3        4         5         6
    0          NaN       NaN       NaN -1.321049      NaN       NaN       NaN
    1     2.129445  0.116825  0.047648       NaN      NaN       NaN  0.099828
    2          NaN       NaN  1.358936       NaN      NaN       NaN       NaN
    3    -0.453008  1.126833  0.089595       NaN      NaN       NaN       NaN
    4          NaN       NaN       NaN       NaN      NaN       NaN       NaN
    ...        ...       ...       ...       ...      ...       ...       ...
    1995  0.111459       NaN  0.769639       NaN      NaN       NaN       NaN
    1996       NaN -0.847578       NaN       NaN      NaN       NaN  1.231233
    1997       NaN       NaN       NaN       NaN      NaN -0.345409       NaN
    1998       NaN       NaN       NaN       NaN      NaN       NaN       NaN
    1999  1.076450       NaN       NaN       NaN  0.06595       NaN       NaN

    [2000 rows x 7 columns]

    SimpleImputer()
                 0         1         2         3        4         5         6
    0    -0.028412 -0.001201  0.039907 -1.321049  0.00855  0.061709 -0.029496
    1     2.129445  0.116825  0.047648  0.003376  0.00855  0.061709  0.099828
    2    -0.028412 -0.001201  1.358936  0.003376  0.00855  0.061709 -0.029496
    3    -0.453008  1.126833  0.089595  0.003376  0.00855  0.061709 -0.029496
    4    -0.028412 -0.001201  0.039907  0.003376  0.00855  0.061709 -0.029496
    ...        ...       ...       ...       ...      ...       ...       ...
    1995  0.111459 -0.001201  0.769639  0.003376  0.00855  0.061709 -0.029496
    1996 -0.028412 -0.847578  0.039907  0.003376  0.00855  0.061709  1.231233
    1997 -0.028412 -0.001201  0.039907  0.003376  0.00855 -0.345409 -0.029496
    1998 -0.028412 -0.001201  0.039907  0.003376  0.00855  0.061709 -0.029496
    1999  1.076450 -0.001201  0.039907  0.003376  0.06595  0.061709 -0.029496

    [2000 rows x 7 columns]

    SimpleImputer(strategy='median')
                 0         1         2         3         4         5         6
    0    -0.039900  0.005708  0.010764 -1.321049  0.029161  0.075754 -0.039837
    1     2.129445  0.116825  0.047648 -0.053708  0.029161  0.075754  0.099828
    2    -0.039900  0.005708  1.358936 -0.053708  0.029161  0.075754 -0.039837
    3    -0.453008  1.126833  0.089595 -0.053708  0.029161  0.075754 -0.039837
    4    -0.039900  0.005708  0.010764 -0.053708  0.029161  0.075754 -0.039837
    ...        ...       ...       ...       ...       ...       ...       ...
    1995  0.111459  0.005708  0.769639 -0.053708  0.029161  0.075754 -0.039837
    1996 -0.039900 -0.847578  0.010764 -0.053708  0.029161  0.075754  1.231233
    1997 -0.039900  0.005708  0.010764 -0.053708  0.029161 -0.345409 -0.039837
    1998 -0.039900  0.005708  0.010764 -0.053708  0.029161  0.075754 -0.039837
    1999  1.076450  0.005708  0.010764 -0.053708  0.065950  0.075754 -0.039837

    [2000 rows x 7 columns]

    StandardScaler()
                 0         1         2         3         4         5         6
    0          NaN       NaN       NaN -1.286133       NaN       NaN       NaN
    1     2.077569  0.120542  0.007924       NaN       NaN       NaN  0.124082
    2          NaN       NaN  1.350332       NaN       NaN       NaN       NaN
    3    -0.408798  1.152071  0.050867       NaN       NaN       NaN       NaN
    4          NaN       NaN       NaN       NaN       NaN       NaN       NaN
    ...        ...       ...       ...       ...       ...       ...       ...
    1995  0.134666       NaN  0.747050       NaN       NaN       NaN       NaN
    1996       NaN -0.864412       NaN       NaN       NaN       NaN  1.209625
    1997       NaN       NaN       NaN       NaN       NaN -0.422822       NaN
    1998       NaN       NaN       NaN       NaN       NaN       NaN       NaN
    1999  1.063753       NaN       NaN       NaN  0.056637       NaN       NaN

    [2000 rows x 7 columns]

    MinMaxScaler()
                 0         1         2         3         4         5         6
    0          NaN       NaN       NaN  0.263183       NaN       NaN       NaN
    1     0.842643  0.475295  0.522660       NaN       NaN       NaN  0.530120
    2          NaN       NaN  0.742624       NaN       NaN       NaN       NaN
    3     0.477440  0.657436  0.529697       NaN       NaN       NaN       NaN
    4          NaN       NaN       NaN       NaN       NaN       NaN       NaN
    ...        ...       ...       ...       ...       ...       ...       ...
    1995  0.557265       NaN  0.643772       NaN       NaN       NaN       NaN
    1996       NaN  0.301378       NaN       NaN       NaN       NaN  0.707413
    1997       NaN       NaN       NaN       NaN       NaN  0.418713       NaN
    1998       NaN       NaN       NaN       NaN       NaN       NaN       NaN
    1999  0.693731       NaN       NaN       NaN  0.549106       NaN       NaN

    [2000 rows x 7 columns]

    RobustScaler()
                 0         1         2         3         4         5         6
    0          NaN       NaN       NaN -0.883319       NaN       NaN       NaN
    1     1.576961  0.078896  0.028606       NaN       NaN       NaN  0.102147
    2          NaN       NaN  1.045586       NaN       NaN       NaN       NaN
    3    -0.300300  0.796032  0.061138       NaN       NaN       NaN       NaN
    4          NaN       NaN       NaN       NaN       NaN       NaN       NaN
    ...        ...       ...       ...       ...       ...       ...       ...
    1995  0.110027       NaN  0.588552       NaN       NaN       NaN       NaN
    1996       NaN -0.605859       NaN       NaN       NaN       NaN  0.929629
    1997       NaN       NaN       NaN       NaN       NaN -0.297223       NaN
    1998       NaN       NaN       NaN       NaN       NaN       NaN       NaN
    1999  0.811508       NaN       NaN       NaN  0.026008       NaN       NaN

    [2000 rows x 7 columns]






|

.. code-block:: default
   :lineno-start: 11


    # Libraries
    import pandas as pd

    # Libraries specific
    from sklearn.preprocessing import StandardScaler
    from sklearn.preprocessing import MinMaxScaler
    from sklearn.preprocessing import RobustScaler
    from sklearn.preprocessing import Normalizer
    from sklearn.impute import SimpleImputer


    class DataframeXYWrapper():

        def __init__(self, dataframe, X_columns, y_columns):
            """
            """
            self.dataframe = dataframe
            self.X_cols = X_columns
            self.y_cols = y_columns

        def get_X(self):
            """Return..."""
            return self.dataframe[self.X_cols]

        def get_y(self):
            """Return..."""
            return self.dataframe[self.y_cols]

        def get_X_y(self):
            """Return...
            """
            return self.dataframe[self.X_cols + self.y_cols]

        def apply(self, obj, func, requires_X=False,
                                   requires_y=False,
                                   argname_X='X',
                                   argname_y='y',
                                   inplace=True,
                                   return_obj=True,
                                   **kwargs):
            """
            """
            if requires_X:
                kwargs[argname_X] = self.get_X()
            if requires_y:
                kwargs[argname_y] = self.get_y()

            # Output
            out = getattr(obj, func)(**kwargs)

            # Inplace
            if inplace:
                self.dataframe[self.X_cols] = out

            # Return
            if return_obj:
                return obj, out
            return out



    # --------------------------------------------------
    # Main
    # --------------------------------------------------
    # Libraries
    import numpy as np

    N = 2000 # number of observations
    F = 7    # number of features
    P = 70   # percent of cells with nan

    # Create dataset
    X = np.random.randn(N, F)
    y = (np.random.rand(N) > 0.1).astype(int)

    # Include NaN
    idxs = np.random.choice(X.size, int(N*F*P/100), replace=False)
    X.ravel()[idxs] = np.nan

    # Create dataframe
    dataframe = pd.DataFrame(X)
    dataframe['y'] = y

    # Create wrapper
    wrapper = DataframeXYWrapper(dataframe=dataframe,
                                 X_columns=list(range(F)),
                                 y_columns=['y'])
    # Show
    print("Features:")
    print(wrapper.get_X())

    # ------------------------------
    # Imputers
    # ------------------------------
    # Loop
    for name, imputer in [
                ('mean', SimpleImputer(strategy='mean')),
                ('median', SimpleImputer(strategy='median'))]:
        # Apply imputer
        obj, out = wrapper.apply(imputer, 'fit_transform',
                requires_X=True, inplace=False)
        # Display
        print("\n%s" % imputer)
        print(pd.DataFrame(out))


    # ------------------------------
    # Scalers
    # ------------------------------
    # Loop
    for name, scaler in [('std', StandardScaler()),
                         ('mmx', MinMaxScaler()),
                         ('rbs', RobustScaler())]:
        # Apply scaler
        obj, out = wrapper.apply(scaler, 'fit_transform',
                requires_X=True, inplace=False)
        # Display
        print("\n%s" % scaler)
        print(pd.DataFrame(out))


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.073 seconds)


.. _sphx_glr_download__examples_scikits_plot_data_wrapper.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_data_wrapper.py <plot_data_wrapper.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_data_wrapper.ipynb <plot_data_wrapper.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
