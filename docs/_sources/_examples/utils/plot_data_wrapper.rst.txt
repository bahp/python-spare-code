
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples\utils\plot_data_wrapper.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_utils_plot_data_wrapper.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_utils_plot_data_wrapper.py:


Dummy Data Wrapper
==================

Dummy data wrapper

.. warning:: Non sense!

.. GENERATED FROM PYTHON SOURCE LINES 10-130




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Features:
                 0         1         2         3         4         5         6
    0     0.302942       NaN       NaN       NaN -0.849377  1.144693       NaN
    1          NaN  0.056130       NaN       NaN  0.885033       NaN       NaN
    2    -0.414552       NaN       NaN       NaN  0.754288       NaN       NaN
    3     0.063185  1.062158 -0.416276       NaN  0.021712       NaN       NaN
    4     1.084330       NaN  1.254950       NaN -1.096247  1.474934       NaN
    ...        ...       ...       ...       ...       ...       ...       ...
    1995       NaN  0.520439       NaN       NaN  0.487670       NaN -0.423363
    1996  0.781397 -1.595588       NaN -1.188084  0.894960       NaN  0.064132
    1997       NaN       NaN       NaN       NaN       NaN       NaN       NaN
    1998       NaN       NaN  1.580865       NaN       NaN       NaN       NaN
    1999       NaN -0.014529       NaN       NaN -0.853628       NaN -0.632370

    [2000 rows x 7 columns]

    SimpleImputer()
                 0         1         2         3         4         5         6
    0     0.302942 -0.023134  0.003793  0.010946 -0.849377  1.144693 -0.094359
    1     0.036326  0.056130  0.003793  0.010946  0.885033 -0.004763 -0.094359
    2    -0.414552 -0.023134  0.003793  0.010946  0.754288 -0.004763 -0.094359
    3     0.063185  1.062158 -0.416276  0.010946  0.021712 -0.004763 -0.094359
    4     1.084330 -0.023134  1.254950  0.010946 -1.096247  1.474934 -0.094359
    ...        ...       ...       ...       ...       ...       ...       ...
    1995  0.036326  0.520439  0.003793  0.010946  0.487670 -0.004763 -0.423363
    1996  0.781397 -1.595588  0.003793 -1.188084  0.894960 -0.004763  0.064132
    1997  0.036326 -0.023134  0.003793  0.010946  0.002724 -0.004763 -0.094359
    1998  0.036326 -0.023134  1.580865  0.010946  0.002724 -0.004763 -0.094359
    1999  0.036326 -0.014529  0.003793  0.010946 -0.853628 -0.004763 -0.632370

    [2000 rows x 7 columns]

    SimpleImputer(strategy='median')
                 0         1         2         3         4         5         6
    0     0.302942 -0.047105  0.054820  0.057284 -0.849377  1.144693 -0.077256
    1     0.000898  0.056130  0.054820  0.057284  0.885033  0.036010 -0.077256
    2    -0.414552 -0.047105  0.054820  0.057284  0.754288  0.036010 -0.077256
    3     0.063185  1.062158 -0.416276  0.057284  0.021712  0.036010 -0.077256
    4     1.084330 -0.047105  1.254950  0.057284 -1.096247  1.474934 -0.077256
    ...        ...       ...       ...       ...       ...       ...       ...
    1995  0.000898  0.520439  0.054820  0.057284  0.487670  0.036010 -0.423363
    1996  0.781397 -1.595588  0.054820 -1.188084  0.894960  0.036010  0.064132
    1997  0.000898 -0.047105  0.054820  0.057284  0.050072  0.036010 -0.077256
    1998  0.000898 -0.047105  1.580865  0.057284  0.050072  0.036010 -0.077256
    1999  0.000898 -0.014529  0.054820  0.057284 -0.853628  0.036010 -0.632370

    [2000 rows x 7 columns]

    StandardScaler()
                 0         1         2         3         4         5         6
    0     0.267039       NaN       NaN       NaN -0.864796  1.213613       NaN
    1          NaN  0.078708       NaN       NaN  0.895455       NaN       NaN
    2    -0.451594       NaN       NaN       NaN  0.762761       NaN       NaN
    3     0.026902  1.077681 -0.414083       NaN  0.019271       NaN       NaN
    4     1.049668       NaN  1.233325       NaN -1.115344  1.562286       NaN
    ...        ...       ...       ...       ...       ...       ...       ...
    1995       NaN  0.539761       NaN       NaN  0.492171       NaN -0.329612
    1996  0.746254 -1.561427       NaN -1.212387  0.905530       NaN  0.158783
    1997       NaN       NaN       NaN       NaN       NaN       NaN       NaN
    1998       NaN       NaN  1.554595       NaN       NaN       NaN       NaN
    1999       NaN  0.008545       NaN       NaN -0.869110       NaN -0.539005

    [2000 rows x 7 columns]

    MinMaxScaler()
                 0         1         2         3         4         5         6
    0     0.494926       NaN       NaN       NaN  0.362513  0.725218       NaN
    1          NaN  0.466132       NaN       NaN  0.676609       NaN       NaN
    2     0.389499       NaN       NaN       NaN  0.652931       NaN       NaN
    3     0.459697  0.643925  0.456451       NaN  0.520264       NaN       NaN
    4     0.609740       NaN  0.716805       NaN  0.317805  0.781755       NaN
    ...        ...       ...       ...       ...       ...       ...       ...
    1995       NaN  0.548188       NaN       NaN  0.604648       NaN  0.409351
    1996  0.565228  0.174227       NaN  0.313404  0.678407       NaN  0.487293
    1997       NaN       NaN       NaN       NaN       NaN       NaN       NaN
    1998       NaN       NaN  0.767577       NaN       NaN       NaN       NaN
    1999       NaN  0.453645       NaN       NaN  0.361743       NaN  0.375935

    [2000 rows x 7 columns]

    RobustScaler()
                 0         1         2         3         4         5         6
    0     0.232174       NaN       NaN       NaN -0.669479  0.869760       NaN
    1          NaN  0.073371       NaN       NaN  0.621479       NaN       NaN
    2    -0.319347       NaN       NaN       NaN  0.524162       NaN       NaN
    3     0.047878  0.788369 -0.326807       NaN -0.021109       NaN       NaN
    4     0.832809       NaN  0.832549       NaN -0.853229  1.128834       NaN
    ...        ...       ...       ...       ...       ...       ...       ...
    1995       NaN  0.403362       NaN       NaN  0.325713       NaN -0.247860
    1996  0.599951 -1.100528       NaN -0.887736  0.628868       NaN  0.101254
    1997       NaN       NaN       NaN       NaN       NaN       NaN       NaN
    1998       NaN       NaN  1.058641       NaN       NaN       NaN       NaN
    1999       NaN  0.023153       NaN       NaN -0.672643       NaN -0.397538

    [2000 rows x 7 columns]






|

.. code-block:: default
   :lineno-start: 11


    # Libraries
    import pandas as pd

    # Libraries specific
    from sklearn.preprocessing import StandardScaler
    from sklearn.preprocessing import MinMaxScaler
    from sklearn.preprocessing import RobustScaler
    from sklearn.preprocessing import Normalizer
    from sklearn.impute import SimpleImputer


    class DataframeXYWrapper():

        def __init__(self, dataframe, X_columns, y_columns):
            """
            """
            self.dataframe = dataframe
            self.X_cols = X_columns
            self.y_cols = y_columns

        def get_X(self):
            """Return..."""
            return self.dataframe[self.X_cols]

        def get_y(self):
            """Return..."""
            return self.dataframe[self.y_cols]

        def get_X_y(self):
            """Return...
            """
            return self.dataframe[self.X_cols + self.y_cols]

        def apply(self, obj, func, requires_X=False,
                                   requires_y=False,
                                   argname_X='X',
                                   argname_y='y',
                                   inplace=True,
                                   return_obj=True,
                                   **kwargs):
            """
            """
            if requires_X:
                kwargs[argname_X] = self.get_X()
            if requires_y:
                kwargs[argname_y] = self.get_y()

            # Output
            out = getattr(obj, func)(**kwargs)

            # Inplace
            if inplace:
                self.dataframe[self.X_cols] = out

            # Return
            if return_obj:
                return obj, out
            return out



    # --------------------------------------------------
    # Main
    # --------------------------------------------------
    # Libraries
    import numpy as np

    N = 2000 # number of observations
    F = 7    # number of features
    P = 70   # percent of cells with nan

    # Create dataset
    X = np.random.randn(N, F)
    y = (np.random.rand(N) > 0.1).astype(int)

    # Include NaN
    idxs = np.random.choice(X.size, int(N*F*P/100), replace=False)
    X.ravel()[idxs] = np.nan

    # Create dataframe
    dataframe = pd.DataFrame(X)
    dataframe['y'] = y

    # Create wrapper
    wrapper = DataframeXYWrapper(dataframe=dataframe,
                                 X_columns=list(range(F)),
                                 y_columns=['y'])
    # Show
    print("Features:")
    print(wrapper.get_X())

    # ------------------------------
    # Imputers
    # ------------------------------
    # Loop
    for name, imputer in [
                ('mean', SimpleImputer(strategy='mean')),
                ('median', SimpleImputer(strategy='median'))]:
        # Apply imputer
        obj, out = wrapper.apply(imputer, 'fit_transform',
                requires_X=True, inplace=False)
        # Display
        print("\n%s" % imputer)
        print(pd.DataFrame(out))


    # ------------------------------
    # Scalers
    # ------------------------------
    # Loop
    for name, scaler in [('std', StandardScaler()),
                         ('mmx', MinMaxScaler()),
                         ('rbs', RobustScaler())]:
        # Apply scaler
        obj, out = wrapper.apply(scaler, 'fit_transform',
                requires_X=True, inplace=False)
        # Display
        print("\n%s" % scaler)
        print(pd.DataFrame(out))


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.073 seconds)


.. _sphx_glr_download__examples_utils_plot_data_wrapper.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_data_wrapper.py <plot_data_wrapper.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_data_wrapper.ipynb <plot_data_wrapper.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
