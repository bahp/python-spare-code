
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples/utils/plot_data_wrapper.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_utils_plot_data_wrapper.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_utils_plot_data_wrapper.py:


Data Wrapper
=============

.. warning:: Non sense.

.. GENERATED FROM PYTHON SOURCE LINES 8-128




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Features:
                 0         1         2         3         4         5        6
    0     0.056451  0.897007       NaN       NaN  0.136730 -0.990677      NaN
    1    -0.427038       NaN       NaN  1.232730  1.737826       NaN      NaN
    2    -1.099285       NaN  0.987910  1.290544 -0.742300       NaN      NaN
    3     0.696138  1.131787  0.754314       NaN  0.538522       NaN      NaN
    4          NaN       NaN -0.225438       NaN       NaN  1.203770      NaN
    ...        ...       ...       ...       ...       ...       ...      ...
    1995       NaN       NaN -0.310351 -0.884647  1.482089       NaN      NaN
    1996 -1.158887       NaN  0.561063       NaN       NaN       NaN  0.28021
    1997       NaN       NaN       NaN       NaN       NaN       NaN      NaN
    1998       NaN       NaN       NaN       NaN       NaN  0.708559      NaN
    1999 -0.171525       NaN  2.185621       NaN       NaN -0.163857      NaN

    [2000 rows x 7 columns]

    SimpleImputer()
                 0         1         2         3         4         5         6
    0     0.056451  0.897007  0.013247 -0.024598  0.136730 -0.990677 -0.008045
    1    -0.427038  0.040370  0.013247  1.232730  1.737826 -0.011921 -0.008045
    2    -1.099285  0.040370  0.987910  1.290544 -0.742300 -0.011921 -0.008045
    3     0.696138  1.131787  0.754314 -0.024598  0.538522 -0.011921 -0.008045
    4     0.037109  0.040370 -0.225438 -0.024598 -0.033058  1.203770 -0.008045
    ...        ...       ...       ...       ...       ...       ...       ...
    1995  0.037109  0.040370 -0.310351 -0.884647  1.482089 -0.011921 -0.008045
    1996 -1.158887  0.040370  0.561063 -0.024598 -0.033058 -0.011921  0.280210
    1997  0.037109  0.040370  0.013247 -0.024598 -0.033058 -0.011921 -0.008045
    1998  0.037109  0.040370  0.013247 -0.024598 -0.033058  0.708559 -0.008045
    1999 -0.171525  0.040370  2.185621 -0.024598 -0.033058 -0.163857 -0.008045

    [2000 rows x 7 columns]

    SimpleImputer(strategy='median')
                 0         1         2         3         4         5         6
    0     0.056451  0.897007 -0.008354 -0.046689  0.136730 -0.990677  0.000069
    1    -0.427038 -0.000171 -0.008354  1.232730  1.737826  0.006750  0.000069
    2    -1.099285 -0.000171  0.987910  1.290544 -0.742300  0.006750  0.000069
    3     0.696138  1.131787  0.754314 -0.046689  0.538522  0.006750  0.000069
    4    -0.022586 -0.000171 -0.225438 -0.046689 -0.005400  1.203770  0.000069
    ...        ...       ...       ...       ...       ...       ...       ...
    1995 -0.022586 -0.000171 -0.310351 -0.884647  1.482089  0.006750  0.000069
    1996 -1.158887 -0.000171  0.561063 -0.046689 -0.005400  0.006750  0.280210
    1997 -0.022586 -0.000171 -0.008354 -0.046689 -0.005400  0.006750  0.000069
    1998 -0.022586 -0.000171 -0.008354 -0.046689 -0.005400  0.708559  0.000069
    1999 -0.171525 -0.000171  2.185621 -0.046689 -0.005400 -0.163857  0.000069

    [2000 rows x 7 columns]

    StandardScaler()
                 0         1         2         3         4         5         6
    0     0.019110  0.868868       NaN       NaN  0.167914 -1.047631       NaN
    1    -0.458589       NaN       NaN  1.200635  1.751342       NaN       NaN
    2    -1.122785       NaN  1.027158  1.255843 -0.701416       NaN       NaN
    3     0.651137  1.107000  0.780981       NaN  0.565272       NaN       NaN
    4          NaN       NaN -0.251541       NaN       NaN  1.301240       NaN
    ...        ...       ...       ...       ...       ...       ...       ...
    1995       NaN       NaN -0.341027 -0.821270  1.498428       NaN       NaN
    1996 -1.181674       NaN  0.577321       NaN       NaN       NaN  0.294727
    1997       NaN       NaN       NaN       NaN       NaN       NaN       NaN
    1998       NaN       NaN       NaN       NaN       NaN  0.771181       NaN
    1999 -0.206136       NaN  2.289378       NaN       NaN -0.162627       NaN

    [2000 rows x 7 columns]

    MinMaxScaler()
                 0         1         2         3         4         5         6
    0     0.499313  0.565029       NaN       NaN  0.545706  0.326623       NaN
    1     0.413165       NaN       NaN  0.687559  0.834713       NaN       NaN
    2     0.293386       NaN  0.662697  0.697405  0.387037       NaN       NaN
    3     0.613291  0.604279  0.620443       NaN  0.618232       NaN       NaN
    4          NaN       NaN  0.443223       NaN       NaN  0.725590       NaN
    ...        ...       ...       ...       ...       ...       ...       ...
    1995       NaN       NaN  0.427864  0.326973  0.788551       NaN       NaN
    1996  0.282766       NaN  0.585487       NaN       NaN       NaN  0.556777
    1997       NaN       NaN       NaN       NaN       NaN       NaN       NaN
    1998       NaN       NaN       NaN       NaN       NaN  0.635557       NaN
    1999  0.458692       NaN  0.879341       NaN       NaN  0.476945       NaN

    [2000 rows x 7 columns]

    RobustScaler()
                 0         1         2         3         4         5         6
    0     0.059074  0.678838       NaN       NaN  0.098522 -0.772043       NaN
    1    -0.302297       NaN       NaN  0.879179  1.208370       NaN       NaN
    2    -0.804749       NaN  0.772633  0.918907 -0.510804       NaN       NaN
    3     0.537190  0.856481  0.591473       NaN  0.377036       NaN       NaN
    4          NaN       NaN -0.168355       NaN       NaN  0.926535       NaN
    ...        ...       ...       ...       ...       ...       ...       ...
    1995       NaN       NaN -0.234207 -0.575821  1.031098       NaN       NaN
    1996 -0.849297       NaN  0.441600       NaN       NaN       NaN  0.209561
    1997       NaN       NaN       NaN       NaN       NaN       NaN       NaN
    1998       NaN       NaN       NaN       NaN       NaN  0.543225       NaN
    1999 -0.111320       NaN  1.701494       NaN       NaN -0.132055       NaN

    [2000 rows x 7 columns]






|

.. code-block:: default
   :lineno-start: 9


    # Libraries
    import pandas as pd

    # Libraries specific
    from sklearn.preprocessing import StandardScaler
    from sklearn.preprocessing import MinMaxScaler
    from sklearn.preprocessing import RobustScaler
    from sklearn.preprocessing import Normalizer
    from sklearn.impute import SimpleImputer


    class DataframeXYWrapper():

        def __init__(self, dataframe, X_columns, y_columns):
            """
            """
            self.dataframe = dataframe
            self.X_cols = X_columns
            self.y_cols = y_columns

        def get_X(self):
            """Return..."""
            return self.dataframe[self.X_cols]

        def get_y(self):
            """Return..."""
            return self.dataframe[self.y_cols]

        def get_X_y(self):
            """Return...
            """
            return self.dataframe[self.X_cols + self.y_cols]

        def apply(self, obj, func, requires_X=False,
                                   requires_y=False,
                                   argname_X='X',
                                   argname_y='y',
                                   inplace=True,
                                   return_obj=True,
                                   **kwargs):
            """
            """
            if requires_X:
                kwargs[argname_X] = self.get_X()
            if requires_y:
                kwargs[argname_y] = self.get_y()

            # Output
            out = getattr(obj, func)(**kwargs)

            # Inplace
            if inplace:
                self.dataframe[self.X_cols] = out

            # Return
            if return_obj:
                return obj, out
            return out



    # --------------------------------------------------
    # Main
    # --------------------------------------------------
    # Libraries
    import numpy as np

    N = 2000 # number of observations
    F = 7    # number of features
    P = 70   # percent of cells with nan

    # Create dataset
    X = np.random.randn(N, F)
    y = (np.random.rand(N) > 0.1).astype(int)

    # Include NaN
    idxs = np.random.choice(X.size, int(N*F*P/100), replace=False)
    X.ravel()[idxs] = np.nan

    # Create dataframe
    dataframe = pd.DataFrame(X)
    dataframe['y'] = y

    # Create wrapper
    wrapper = DataframeXYWrapper(dataframe=dataframe,
                                 X_columns=list(range(F)),
                                 y_columns=['y'])
    # Show
    print("Features:")
    print(wrapper.get_X())

    # ------------------------------
    # Imputers
    # ------------------------------
    # Loop
    for name, imputer in [
                ('mean', SimpleImputer(strategy='mean')),
                ('median', SimpleImputer(strategy='median'))]:
        # Apply imputer
        obj, out = wrapper.apply(imputer, 'fit_transform',
                requires_X=True, inplace=False)
        # Display
        print("\n%s" % imputer)
        print(pd.DataFrame(out))


    # ------------------------------
    # Scalers
    # ------------------------------
    # Loop
    for name, scaler in [('std', StandardScaler()),
                         ('mmx', MinMaxScaler()),
                         ('rbs', RobustScaler())]:
        # Apply scaler
        obj, out = wrapper.apply(scaler, 'fit_transform',
                requires_X=True, inplace=False)
        # Display
        print("\n%s" % scaler)
        print(pd.DataFrame(out))


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.093 seconds)


.. _sphx_glr_download__examples_utils_plot_data_wrapper.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_data_wrapper.py <plot_data_wrapper.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_data_wrapper.ipynb <plot_data_wrapper.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
