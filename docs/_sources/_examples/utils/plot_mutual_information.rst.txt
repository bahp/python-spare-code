
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples/utils/plot_mutual_information.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_utils_plot_mutual_information.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_utils_plot_mutual_information.py:


Mutual Information Criteria
---------------------------

The ``Mutual Information Score``, often denoted as ``MIS``, expresses the extent
to which observed frequency of co-occurrence differs from what we would expect
(statistically speaking). In statistically pure terms this is a measure of the
strength of association between words x and y.

See below for a few resources.

  * `R1`_: Detailed video tutorial step by step.
  * `R2`_: Detailed tutorial with python code.
  * `R3`_: Possible libraries in python/R and other tools.
  * `R5`_: Efficient pairwise MIS implementation...
  * `M1`_: Idenetification of antibiotics pairs that evade .... manuscript.

.. _R1: https://www.youtube.com/watch?v=eJIp_mgVLwE
.. _R2: https://www.blog.trainindata.com/mutual-information-with-python/
.. _R3: https://stats.stackexchange.com/questions/531527/mutual-information-and-maximual-infomation-coffecient
.. _R4: https://stats.stackexchange.com/questions/306131/how-to-correctly-compute-mutual-information-python-example
.. _R5: https://stackoverflow.com/questions/20491028/optimal-way-to-compute-pairwise-mutual-information-using-numpy

.. _M1: https://www.thelancet.com/journals/lanmic/article/PIIS2666-5247(21)00118-X/fulltext

.. GENERATED FROM PYTHON SOURCE LINES 30-31

Lets import the main libraries

.. GENERATED FROM PYTHON SOURCE LINES 31-61

.. code-block:: default
   :lineno-start: 32


    # Generic
    import warnings
    import numpy as np
    import pandas as pd

    # Specific
    from itertools import combinations
    from timeit import default_timer as timer
    from scipy.stats.contingency import crosstab
    from sklearn.metrics import mutual_info_score
    from sklearn.metrics import adjusted_mutual_info_score
    from sklearn.metrics import normalized_mutual_info_score

    # Own
    from mic import mutual_info_matrix_v3
    from mic import mutual_info_matrix_v2
    from mic import mutual_info_matrix_v1

    warnings.filterwarnings("ignore")

    def print_example_heading(n, t=''):
        print("\n" + "=" * 80 + "\nExample %s\n"%n + "=" * 80)

    try:
        __file__
        TERMINAL = True
    except:
        TERMINAL = False








.. GENERATED FROM PYTHON SOURCE LINES 62-75

a) Manual example (youtube)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Lets start with a hard coded example extracted from a very
detailed youtube tutorial (`R1`_). This video tutorial shows step by
step how to compute the mutual information score using the contingency
matrix defined below. Pay special attention to the following consideration
when implementing the ``MIS``:

  * only possible to compute where more than one class present
  * log(0) raises a zero division.
  * lim x->0 log(x) = 0
  * this np.nan can be filled with 0.


.. GENERATED FROM PYTHON SOURCE LINES 75-111

.. code-block:: default
   :lineno-start: 76


    # See: https://www.youtube.com/watch?v=eJIp_mgVLwE

    # Contingency
    ct = np.array([[3/5, 1/5], [0/5, 1/5]])

    # Compute MIS manually
    mi1 = (3/5)*np.log((3/5) / ((3/5)*(4/5)))
    #mi2 = (0/5)*np.log((0/5) / ((3/5)*(1/5))) # zero division
    mi3 = (1/5)*np.log((1/5) / ((2/5)*(4/5)))
    mi4 = (1/5)*np.log((1/5) / ((2/5)*(1/5)))
    m1 = np.array([[mi1, mi3], [0, mi4]])
    score1 = mi1 + mi3 + mi4 # 0.22

    # Compute component information matrix
    m2 = mutual_info_matrix_v1(ct=ct)
    m3 = mutual_info_matrix_v2(ct=ct)
    m4 = mutual_info_matrix_v3(ct=ct)

    # .. note: Raises a math domain error.
    # Compute MIS scikits
    #score4 = mutual_info_score(labels_true=None,
    #                           labels_pred=None,
    #                           contingency=ct)

    # Cumu
    cumu = pd.DataFrame([
        ['manual'] + m1.flatten().tolist(),
        ['mutual_info_matrix_v1'] + m2.flatten().tolist(),
        ['mutual_info_matrix_v2'] + m3.flatten().tolist(),
        ['mutual_info_matrix_v3'] + m4.flatten().tolist()
    ], columns=['method', 'c11', 'c12', 'c21', 'c22'])

    # Compute MIS score
    cumu['mis'] = cumu.sum(axis=1)








.. GENERATED FROM PYTHON SOURCE LINES 112-113

Lets see the contingency matrix

.. GENERATED FROM PYTHON SOURCE LINES 113-119

.. code-block:: default
   :lineno-start: 113

    if TERMINAL:
        print_example_heading(n=1)
        print('\nContingency:')
        print(ct)
    pd.DataFrame(ct)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>0</th>
          <th>1</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>0.6</td>
          <td>0.2</td>
        </tr>
        <tr>
          <th>1</th>
          <td>0.0</td>
          <td>0.2</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 120-121

Lets see the results

.. GENERATED FROM PYTHON SOURCE LINES 121-127

.. code-block:: default
   :lineno-start: 121

    if TERMINAL:
        print("\nResults:")
        print(cumu)
    cumu







.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>method</th>
          <th>c11</th>
          <th>c12</th>
          <th>c21</th>
          <th>c22</th>
          <th>mis</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>manual</td>
          <td>0.133886</td>
          <td>-0.094001</td>
          <td>0.0</td>
          <td>0.183258</td>
          <td>0.223144</td>
        </tr>
        <tr>
          <th>1</th>
          <td>mutual_info_matrix_v1</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>0.000000</td>
        </tr>
        <tr>
          <th>2</th>
          <td>mutual_info_matrix_v2</td>
          <td>0.133886</td>
          <td>-0.094001</td>
          <td>0.0</td>
          <td>0.183258</td>
          <td>0.223144</td>
        </tr>
        <tr>
          <th>3</th>
          <td>mutual_info_matrix_v3</td>
          <td>0.133886</td>
          <td>-0.094001</td>
          <td>0.0</td>
          <td>0.183258</td>
          <td>0.223144</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 128-129

.. note:: The method ``mutual_info_matrix_v1`` does not work in this example!

.. GENERATED FROM PYTHON SOURCE LINES 132-139

b) Another two class example
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In the previous example we started with the definition of the contingency
matrix. However, that is not often the case. In this example we will go
one step back and show how to compute the contingency matrix from the raw
vectors using either scipy o pandas. Note that the contingency matrix is
just a way to display the frequency distribution of the variables.

.. GENERATED FROM PYTHON SOURCE LINES 139-184

.. code-block:: default
   :lineno-start: 140


    # Generate the dataset
    x = np.array([
        ['S1', 'S2'],
        ['S1', 'R2'],
        ['R1', 'S2'],
        ['R1', 'R2']])
    d = np.repeat(x, [63, 22, 15, 25], axis=0)
    d = pd.DataFrame(data=d)

    # Create variables
    x = d[0]
    y = d[1]

    # Compute contingency
    #ct = crosstab(d[0], d[1]).count
    ct = pd.crosstab(x, y)

    # Compute MIS
    score0 = mutual_info_score(labels_true=x, labels_pred=y)

    # Compute MIS
    m1 = mutual_info_matrix_v1(x=x, y=y)
    m2 = mutual_info_matrix_v2(x=x, y=y)
    m3 = mutual_info_matrix_v3(x=x, y=y)

    # Compute MIS
    m4 = mutual_info_matrix_v1(ct=ct)
    m5 = mutual_info_matrix_v2(ct=ct)
    m6 = mutual_info_matrix_v3(ct=ct)

    # Cumu
    cumu = pd.DataFrame([
        #['mutual_info_score'] + m1.flatten().tolist(),
        ['mutual_info_matrix_v1 (x,y)'] + m1.flatten().tolist(),
        ['mutual_info_matrix_v2 (x,y)'] + m2.flatten().tolist(),
        ['mutual_info_matrix_v3 (x,y)'] + m3.flatten().tolist(),
        ['mutual_info_matrix_v1 (ct)'] + m4.flatten().tolist(),
        ['mutual_info_matrix_v2 (ct)'] + m5.flatten().tolist(),
        ['mutual_info_matrix_v3 (ct)'] + m6.flatten().tolist(),
    ], columns=['method', 'c11', 'c12', 'c21', 'c22'])

    # Compute MIS score
    cumu['mis'] = cumu.sum(axis=1)








.. GENERATED FROM PYTHON SOURCE LINES 185-186

Lets see the contingency matrix

.. GENERATED FROM PYTHON SOURCE LINES 186-192

.. code-block:: default
   :lineno-start: 186

    if TERMINAL:
        print_example_heading(n=2)
        print('\nContingency:')
        print(ct)
    ct






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>1</th>
          <th>R2</th>
          <th>S2</th>
        </tr>
        <tr>
          <th>0</th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>R1</th>
          <td>25</td>
          <td>15</td>
        </tr>
        <tr>
          <th>S1</th>
          <td>22</td>
          <td>63</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 193-194

Lets see the results

.. GENERATED FROM PYTHON SOURCE LINES 194-200

.. code-block:: default
   :lineno-start: 194

    if TERMINAL:
        print("\nResults:")
        print(cumu)
    cumu







.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>method</th>
          <th>c11</th>
          <th>c12</th>
          <th>c21</th>
          <th>c22</th>
          <th>mis</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>mutual_info_matrix_v1 (x,y)</td>
          <td>0.101633</td>
          <td>-0.061107</td>
          <td>-0.065726</td>
          <td>0.086733</td>
          <td>0.061532</td>
        </tr>
        <tr>
          <th>1</th>
          <td>mutual_info_matrix_v2 (x,y)</td>
          <td>0.101633</td>
          <td>-0.061107</td>
          <td>-0.065726</td>
          <td>0.086733</td>
          <td>0.061532</td>
        </tr>
        <tr>
          <th>2</th>
          <td>mutual_info_matrix_v3 (x,y)</td>
          <td>0.101633</td>
          <td>-0.061107</td>
          <td>-0.065726</td>
          <td>0.086733</td>
          <td>0.061532</td>
        </tr>
        <tr>
          <th>3</th>
          <td>mutual_info_matrix_v1 (ct)</td>
          <td>0.101633</td>
          <td>-0.065726</td>
          <td>-0.061107</td>
          <td>0.086733</td>
          <td>0.061532</td>
        </tr>
        <tr>
          <th>4</th>
          <td>mutual_info_matrix_v2 (ct)</td>
          <td>0.101633</td>
          <td>-0.061107</td>
          <td>-0.065726</td>
          <td>0.086733</td>
          <td>0.061532</td>
        </tr>
        <tr>
          <th>5</th>
          <td>mutual_info_matrix_v3 (ct)</td>
          <td>0.101633</td>
          <td>-0.061107</td>
          <td>-0.065726</td>
          <td>0.086733</td>
          <td>0.061532</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 201-212

c) Collateral Resistance Index
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Now, lets compute the ``MIS`` score as defined in the manuscript (`M1`_).
Note that the manuscript provided the cumulative data as appendix
material and therefore we can use it to compare that our implementation
produces the same result.

.. note:: The results provided by our own ``MIS`` implementation differs
          from the results provided in the manuscript. This discrepancy
          occurs for those rows in which the contingency matrix contains
          one of more zeros.

.. GENERATED FROM PYTHON SOURCE LINES 212-253

.. code-block:: default
   :lineno-start: 213


    def collateral_resistance_index(m):
        """Collateral Resistance Index

        The collateral resistance index is based on the mutual
        information matrix. This implementation assumes there
        are two classes resistant (R) and sensitive (S).

        Parameters
        ----------
        m: np.array
            A numpy array with the mutual information matrix.

        Returns
        -------
        """
        return (m[0, 0] + m[1, 1]) - (m[0, 1] + m[1, 0])

    def CRI(x, func):
        ct = np.array([[x.S1S2, x.S1R2], [x.R1S2, x.R1R2]])
        m = func(ct=ct)
        return collateral_resistance_index(m)

    def compare(data, x, y):
        return data[x].round(5).compare(data[y].round(5)).index.values

    # Load data
    data = pd.read_excel('./data/mmc2.xlsx')

    # .. note: MIS_v1 is inspired by the implementation in sklearn. For some
    #          reason, when one of the values of the contigency matrix is 0
    #          it returns an array with three values and thus raises an error.

    # Compute MIC score ourselves
    #data['MIS_v1'] = data.apply(CRI, args=(mutual_info_matrix_v1,), axis=1)
    data['MIS_v2'] = data.apply(CRI, args=(mutual_info_matrix_v2,), axis=1)
    data['MIS_v3'] = data.apply(CRI, args=(mutual_info_matrix_v3,), axis=1)

    # Compute indexes of those that do not give same result.
    idxs1 = compare(data, 'MIS', 'MIS_v3')








.. GENERATED FROM PYTHON SOURCE LINES 254-255

Lets see the data

.. GENERATED FROM PYTHON SOURCE LINES 255-261

.. code-block:: default
   :lineno-start: 255

    if TERMINAL:
        print_example_heading(n=3)
        print("\nData:")
        print(data)
    data.iloc[:, 3:]






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>Antibiotic_2</th>
          <th>S1S2</th>
          <th>S1R2</th>
          <th>R1S2</th>
          <th>R1R2</th>
          <th>MIS</th>
          <th>P-value</th>
          <th>MIS_v2</th>
          <th>MIS_v3</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>AMPICILLIN</td>
          <td>13849</td>
          <td>5657</td>
          <td>10</td>
          <td>3110</td>
          <td>0.295015</td>
          <td>0.000000e+00</td>
          <td>0.295015</td>
          <td>0.295015</td>
        </tr>
        <tr>
          <th>1</th>
          <td>AMPICILLIN_SULBACTAM</td>
          <td>15264</td>
          <td>4234</td>
          <td>43</td>
          <td>3076</td>
          <td>0.331826</td>
          <td>0.000000e+00</td>
          <td>0.331826</td>
          <td>0.331826</td>
        </tr>
        <tr>
          <th>2</th>
          <td>AZTREONAM</td>
          <td>63</td>
          <td>22</td>
          <td>15</td>
          <td>25</td>
          <td>0.315198</td>
          <td>1.370511e-04</td>
          <td>0.315198</td>
          <td>0.315198</td>
        </tr>
        <tr>
          <th>3</th>
          <td>CEFAZOLIN</td>
          <td>8992</td>
          <td>264</td>
          <td>741</td>
          <td>712</td>
          <td>0.236398</td>
          <td>0.000000e+00</td>
          <td>0.236398</td>
          <td>0.236398</td>
        </tr>
        <tr>
          <th>4</th>
          <td>CEFEPIME</td>
          <td>14272</td>
          <td>112</td>
          <td>2211</td>
          <td>123</td>
          <td>0.024380</td>
          <td>1.073382e-44</td>
          <td>0.024380</td>
          <td>0.024380</td>
        </tr>
        <tr>
          <th>...</th>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
        </tr>
        <tr>
          <th>875</th>
          <td>TETRACYCLINE</td>
          <td>703</td>
          <td>2047</td>
          <td>86</td>
          <td>923</td>
          <td>0.125936</td>
          <td>5.609167e-34</td>
          <td>0.125936</td>
          <td>0.125936</td>
        </tr>
        <tr>
          <th>876</th>
          <td>VANCOMYCIN</td>
          <td>3632</td>
          <td>32</td>
          <td>1167</td>
          <td>57</td>
          <td>0.029895</td>
          <td>5.091803e-15</td>
          <td>0.029895</td>
          <td>0.029895</td>
        </tr>
        <tr>
          <th>877</th>
          <td>TETRACYCLINE</td>
          <td>156</td>
          <td>696</td>
          <td>222</td>
          <td>689</td>
          <td>-0.060360</td>
          <td>2.076596e-03</td>
          <td>-0.060360</td>
          <td>-0.060360</td>
        </tr>
        <tr>
          <th>878</th>
          <td>VANCOMYCIN</td>
          <td>1064</td>
          <td>31</td>
          <td>1134</td>
          <td>22</td>
          <td>-0.009254</td>
          <td>1.650263e-01</td>
          <td>-0.009254</td>
          <td>-0.009254</td>
        </tr>
        <tr>
          <th>879</th>
          <td>VANCOMYCIN</td>
          <td>904</td>
          <td>10</td>
          <td>3307</td>
          <td>81</td>
          <td>0.008185</td>
          <td>1.354200e-02</td>
          <td>0.008185</td>
          <td>0.008185</td>
        </tr>
      </tbody>
    </table>
    <p>880 rows × 9 columns</p>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 262-263

Lets see where the results are different

.. GENERATED FROM PYTHON SOURCE LINES 263-269

.. code-block:: default
   :lineno-start: 263

    if TERMINAL:
        print("\nAre they equal? Show differences below:")
        print(data.iloc[idxs1, :])
    data.iloc[idxs1, 3:]







.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>Antibiotic_2</th>
          <th>S1S2</th>
          <th>S1R2</th>
          <th>R1S2</th>
          <th>R1R2</th>
          <th>MIS</th>
          <th>P-value</th>
          <th>MIS_v2</th>
          <th>MIS_v3</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>54</th>
          <td>CEFEPIME</td>
          <td>8850</td>
          <td>0</td>
          <td>1032</td>
          <td>245</td>
          <td>0.091413</td>
          <td>3.878054e-229</td>
          <td>0.090710</td>
          <td>0.090710</td>
        </tr>
        <tr>
          <th>241</th>
          <td>AZTREONAM</td>
          <td>5</td>
          <td>0</td>
          <td>1</td>
          <td>10</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>0.629259</td>
          <td>0.629259</td>
        </tr>
        <tr>
          <th>246</th>
          <td>CEFUROXIME</td>
          <td>32</td>
          <td>2</td>
          <td>2</td>
          <td>20</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>0.685774</td>
          <td>0.685774</td>
        </tr>
        <tr>
          <th>251</th>
          <td>MEROPENEM</td>
          <td>25</td>
          <td>0</td>
          <td>3</td>
          <td>0</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>0.000000</td>
          <td>0.000000</td>
        </tr>
        <tr>
          <th>286</th>
          <td>CEFTAZIDIME</td>
          <td>2646</td>
          <td>0</td>
          <td>72</td>
          <td>54</td>
          <td>0.095338</td>
          <td>3.297768e-78</td>
          <td>0.093018</td>
          <td>0.093018</td>
        </tr>
        <tr>
          <th>387</th>
          <td>MEROPENEM</td>
          <td>602</td>
          <td>0</td>
          <td>14</td>
          <td>5</td>
          <td>0.051227</td>
          <td>4.602569e-09</td>
          <td>0.042614</td>
          <td>0.042614</td>
        </tr>
        <tr>
          <th>492</th>
          <td>MEROPENEM</td>
          <td>922</td>
          <td>1</td>
          <td>0</td>
          <td>31</td>
          <td>0.152671</td>
          <td>3.238929e-56</td>
          <td>0.145842</td>
          <td>0.145842</td>
        </tr>
        <tr>
          <th>502</th>
          <td>NITROFURANTOIN</td>
          <td>1784</td>
          <td>1979</td>
          <td>0</td>
          <td>34</td>
          <td>0.014705</td>
          <td>4.577273e-09</td>
          <td>0.014099</td>
          <td>0.014099</td>
        </tr>
        <tr>
          <th>624</th>
          <td>AZTREONAM</td>
          <td>4</td>
          <td>0</td>
          <td>0</td>
          <td>0</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>0.000000</td>
          <td>0.000000</td>
        </tr>
        <tr>
          <th>626</th>
          <td>CEFTAZIDIME</td>
          <td>1459</td>
          <td>7</td>
          <td>0</td>
          <td>1</td>
          <td>0.009526</td>
          <td>1.244097e-04</td>
          <td>0.004865</td>
          <td>0.004865</td>
        </tr>
        <tr>
          <th>627</th>
          <td>CEFTRIAXONE</td>
          <td>1459</td>
          <td>8</td>
          <td>1</td>
          <td>0</td>
          <td>0.004484</td>
          <td>2.025597e-02</td>
          <td>-0.000011</td>
          <td>-0.000011</td>
        </tr>
        <tr>
          <th>628</th>
          <td>CEFUROXIME</td>
          <td>48</td>
          <td>0</td>
          <td>3</td>
          <td>0</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>0.000000</td>
          <td>0.000000</td>
        </tr>
        <tr>
          <th>631</th>
          <td>LEVOFLOXACIN</td>
          <td>1272</td>
          <td>145</td>
          <td>1</td>
          <td>0</td>
          <td>0.002209</td>
          <td>2.793473e-01</td>
          <td>-0.000220</td>
          <td>-0.000220</td>
        </tr>
        <tr>
          <th>632</th>
          <td>PIPERACILLIN_TAZOBACTAM</td>
          <td>1456</td>
          <td>1</td>
          <td>1</td>
          <td>0</td>
          <td>0.005266</td>
          <td>6.147526e-03</td>
          <td>-0.000001</td>
          <td>-0.000001</td>
        </tr>
        <tr>
          <th>634</th>
          <td>TOBRAMYCIN</td>
          <td>1427</td>
          <td>60</td>
          <td>2</td>
          <td>0</td>
          <td>0.002809</td>
          <td>1.561921e-01</td>
          <td>-0.000164</td>
          <td>-0.000164</td>
        </tr>
        <tr>
          <th>713</th>
          <td>AMPICILLIN</td>
          <td>1850</td>
          <td>276</td>
          <td>0</td>
          <td>17</td>
          <td>0.031664</td>
          <td>3.211012e-15</td>
          <td>0.029332</td>
          <td>0.029332</td>
        </tr>
        <tr>
          <th>715</th>
          <td>AZTREONAM</td>
          <td>538</td>
          <td>6</td>
          <td>14</td>
          <td>0</td>
          <td>0.006651</td>
          <td>2.074790e-01</td>
          <td>-0.000814</td>
          <td>-0.000814</td>
        </tr>
        <tr>
          <th>723</th>
          <td>PIPERACILLIN_TAZOBACTAM</td>
          <td>1907</td>
          <td>2</td>
          <td>15</td>
          <td>0</td>
          <td>0.003155</td>
          <td>3.483272e-02</td>
          <td>-0.000024</td>
          <td>-0.000024</td>
        </tr>
        <tr>
          <th>756</th>
          <td>PIPERACILLIN_TAZOBACTAM</td>
          <td>1764</td>
          <td>4</td>
          <td>40</td>
          <td>0</td>
          <td>0.002473</td>
          <td>1.314297e-01</td>
          <td>-0.000147</td>
          <td>-0.000147</td>
        </tr>
        <tr>
          <th>786</th>
          <td>PIPERACILLIN_TAZOBACTAM</td>
          <td>1343</td>
          <td>3</td>
          <td>38</td>
          <td>0</td>
          <td>0.003181</td>
          <td>1.362082e-01</td>
          <td>-0.000179</td>
          <td>-0.000179</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 270-275

d) Exploring the efficiency
~~~~~~~~~~~~~~~~~~~~~~~~~~~
This code is used to compare whether the implementations are
more or less efficient between them. Note that the methods
have itself some limitations.

.. GENERATED FROM PYTHON SOURCE LINES 275-300

.. code-block:: default
   :lineno-start: 276


    # Generate data
    N = 10000000
    choices = np.arange(2)
    vector1 = np.random.choice(choices, size=N)
    vector2 = np.random.choice(choices, size=N)

    # Compute times
    t1 = timer()
    m1 = mutual_info_matrix_v1(x=vector1, y=vector2)
    t2 = timer()
    m2 = mutual_info_matrix_v2(x=vector1, y=vector2)
    t3 = timer()
    m3 = mutual_info_matrix_v3(x=vector1, y=vector2)
    t4 = timer()

    # Display
    print_example_heading(n=4)
    print("Are the results equal (m1, m2)? %s" % np.allclose(m1, m2))
    print("Are the results equal (m1, m3)? %s" % np.allclose(m1, m3))
    print("time v1: %.5f" % (t2-t1))
    print("time v2: %.5f" % (t3-t2))
    print("time v3: %.5f" % (t4-t3))






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    ================================================================================
    Example 4
    ================================================================================
    Are the results equal (m1, m2)? True
    Are the results equal (m1, m3)? True
    time v1: 1.68496
    time v2: 1.47595
    time v3: 1.61094




.. GENERATED FROM PYTHON SOURCE LINES 301-310

e) Edge scenarios
~~~~~~~~~~~~~~~~~~~~~~~~~
There are some edge scenarios which we might have or might have not
considered yet. We are including some of them here for future reference
and some interesting questions below.

  - What is the CRI range? (-0.7, 0.7)
  - Should we normalize this value? [-1, 1]? [0, 1]?
  - How to compute CRI if we have three outcomes R, S and I?

.. GENERATED FROM PYTHON SOURCE LINES 310-356

.. code-block:: default
   :lineno-start: 311


    # Heading
    print_example_heading(n=5)

    # Create cases
    data = [
        (['R', 'R', 'R', 'R'], ['R', 'R', 'R', 'R']),
        (['R', 'R', 'R', 'R'], ['S', 'S', 'S', 'S']),
        (['R', 'R', 'S', 'S'], ['R', 'R', 'S', 'S']),
        (['R', 'R', 'S', 'S'], ['S', 'S', 'R', 'R']),
        (['R', 'I', 'S', 'S'], ['R', 'I', 'S', 'S'])
    ]

    # Results
    cumu = []

    # Loop
    for i, (x, y) in enumerate(data):

        # Compute mutual information scores
        mis = mutual_info_score(x, y)
        misa = adjusted_mutual_info_score(x, y)
        misn = normalized_mutual_info_score(x, y)

        # Compute mutual information matrix
        m = mutual_info_matrix_v1(x=x, y=y)

        # Compute collateral resistance index
        try:
            cri = collateral_resistance_index(m)
        except Exception as e:
            print(e)
            cri = None

        # Append
        cumu.append([x, y, mis, misa, misn, cri])

        # Show
        print("\n%s. Contingency matrix:" % i)
        print(m)


    # Create the dataframe
    df = pd.DataFrame(cumu,
        columns=['x', 'y', 'mis', 'mis_adjusted', 'mis_normalized', 'cri'])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    ================================================================================
    Example 5
    ================================================================================
    'float' object is not subscriptable

    0. Contingency matrix:
    0.0
    'float' object is not subscriptable

    1. Contingency matrix:
    0.0
    too many indices for array: array is 1-dimensional, but 2 were indexed

    2. Contingency matrix:
    [0.34657359 0.34657359]
    too many indices for array: array is 1-dimensional, but 2 were indexed

    3. Contingency matrix:
    [0.34657359 0.34657359]
    too many indices for array: array is 1-dimensional, but 2 were indexed

    4. Contingency matrix:
    [0.34657359 0.34657359 0.34657359]




.. GENERATED FROM PYTHON SOURCE LINES 357-358

Lets see the summary of edge cases

.. GENERATED FROM PYTHON SOURCE LINES 358-364

.. code-block:: default
   :lineno-start: 358

    if TERMINAL:
        print("\nSummary of edge scenarios:")
        print(df)
    df







.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>x</th>
          <th>y</th>
          <th>mis</th>
          <th>mis_adjusted</th>
          <th>mis_normalized</th>
          <th>cri</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>[R, R, R, R]</td>
          <td>[R, R, R, R]</td>
          <td>0.000000</td>
          <td>1.0</td>
          <td>1.0</td>
          <td>None</td>
        </tr>
        <tr>
          <th>1</th>
          <td>[R, R, R, R]</td>
          <td>[S, S, S, S]</td>
          <td>0.000000</td>
          <td>1.0</td>
          <td>1.0</td>
          <td>None</td>
        </tr>
        <tr>
          <th>2</th>
          <td>[R, R, S, S]</td>
          <td>[R, R, S, S]</td>
          <td>0.693147</td>
          <td>1.0</td>
          <td>1.0</td>
          <td>None</td>
        </tr>
        <tr>
          <th>3</th>
          <td>[R, R, S, S]</td>
          <td>[S, S, R, R]</td>
          <td>0.693147</td>
          <td>1.0</td>
          <td>1.0</td>
          <td>None</td>
        </tr>
        <tr>
          <th>4</th>
          <td>[R, I, S, S]</td>
          <td>[R, I, S, S]</td>
          <td>1.039721</td>
          <td>1.0</td>
          <td>1.0</td>
          <td>None</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 365-370

f) For continuous variables
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
There are several approaches, one of them is just binning. For more
information just check online, there are many good resources and or
implementations that might be found out there.

.. GENERATED FROM PYTHON SOURCE LINES 370-382

.. code-block:: default
   :lineno-start: 371


    # Heading
    print_example_heading(n=6)

    bins = 5 #?

    def f(X, Y, bins):
        c_XY = np.histogram2d(X, Y, bins)[0]
        c_X = np.histogram(X, bins)[0]
        c_Y = np.histogram(Y, bins)[0]
        return 1





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    ================================================================================
    Example 6
    ================================================================================




.. GENERATED FROM PYTHON SOURCE LINES 383-387

g) Computing pairwise score
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Let's see how we can compute the mutual information square in a
pairwise fashion.

.. GENERATED FROM PYTHON SOURCE LINES 387-420

.. code-block:: default
   :lineno-start: 389



    def f1(x, y):
        # Compute mutual information matrix
        m = mutual_info_matrix_v3(x=x, y=y)
        # Compute collateral resistance index
        cri = collateral_resistance_index(m)
        # Return
        return cri

    # Generate data
    data = np.random.choice(['S', 'R'], size=(100, 4))

    # Convert into DataFrame
    df = pd.DataFrame(data,
        columns=['C%d' % i for i in range(data.shape[1])])

    # Option I
    # --------
    # Create empty matrix
    cols = data.shape[1]
    matrix = np.empty((cols, cols))
    matrix[:] = np.nan

    # Compute pairwise (square matrix)
    for ix in np.arange(cols):
        for jx in np.arange(ix+1, cols):
            matrix[ix,jx] = f1(data[:,ix], data[:,jx])

    # Convert to DataFrame for visualisation
    matrix = pd.DataFrame(matrix,
        index=df.columns, columns=df.columns)








.. GENERATED FROM PYTHON SOURCE LINES 421-422

Lets see the summary of pairwise distances

.. GENERATED FROM PYTHON SOURCE LINES 422-433

.. code-block:: default
   :lineno-start: 422

    if TERMINAL:
        # Heading
        print_example_heading(n=7)
        print("\nSummary of pairwise computations:")
        print(matrix)
    matrix

    # Option II
    # ----------
    #for i, j in list(combinations(df.columns, 2)):






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>C0</th>
          <th>C1</th>
          <th>C2</th>
          <th>C3</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>C0</th>
          <td>NaN</td>
          <td>-0.069964</td>
          <td>-0.009999</td>
          <td>-0.053950</td>
        </tr>
        <tr>
          <th>C1</th>
          <td>NaN</td>
          <td>NaN</td>
          <td>-0.030000</td>
          <td>-0.224257</td>
        </tr>
        <tr>
          <th>C2</th>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>-0.093784</td>
        </tr>
        <tr>
          <th>C3</th>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 434-442

h) Example with more than 2 classes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Let's see how it works for more than two classes.

.. note:: The computation using mutual_info_matrix_v2 should not work
          because it is designed for 2 classes. However, while it does
          not work for low number of samples (e.g. 5), it works for
          larger values (e.g. 100).

.. GENERATED FROM PYTHON SOURCE LINES 442-472

.. code-block:: default
   :lineno-start: 443


    # .. note:: The computation using mutual_info_matrix_v3 which is inspired
    #           by sklearn returns an array of length 5 when the number of
    #           samples is low. However, it works when large number of samples
    #           is used.

    # Generate data
    data = np.random.choice(['S', 'R', 'I'], size=(100, 2))

    # Convert into DataFrame
    df = pd.DataFrame(data,
        columns=['C%d' % i for i in range(data.shape[1])])

    # Compute
    m1 = mutual_info_matrix_v1(x=df.C0, y=df.C1)
    m2 = mutual_info_matrix_v2(x=df.C0, y=df.C1)
    m3 = mutual_info_matrix_v3(x=df.C0, y=df.C1)

    # Show
    print_example_heading(n=8)
    print("Result m1:")
    print(m1)
    print("\nResult m2:")
    print(m2)
    print("\nResult m3:")
    print(m3)

    print("\n")
    #print("Are the results equal (m1, m2)? %s" % np.allclose(m1, m2))
    print("Are the results equal (m1, m3)? %s" % np.allclose(m1, m3))




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    ================================================================================
    Example 8
    ================================================================================
    Result m1:
    [[ 0.0152618   0.00830583 -0.02021242]
     [ 0.00830583 -0.02938933  0.03633157]
     [-0.02021242  0.03633157 -0.00923532]]

    Result m2:
    [[ 0.0152618   0.00830583 -0.02021242]
     [ 0.00830583 -0.02938933  0.03633157]
     [-0.02021242  0.03633157 -0.00923532]]

    Result m3:
    [[ 0.0152618   0.00830583 -0.02021242]
     [ 0.00830583 -0.02938933  0.03633157]
     [-0.02021242  0.03633157 -0.00923532]]


    Are the results equal (m1, m3)? True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  5.315 seconds)


.. _sphx_glr_download__examples_utils_plot_mutual_information.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_mutual_information.py <plot_mutual_information.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_mutual_information.ipynb <plot_mutual_information.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
