
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples\utils\plot_favicons.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_utils_plot_favicons.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_utils_plot_favicons.py:


Plot favicons
=============

This example lists all the libraries installed
in the environment using pip, gets their site
url, downloads the icon and displays it in the
example.

.. note:: The command ``cut`` is not available in windows! It might
          available on Cygwin o Git for windows.

.. GENERATED FROM PYTHON SOURCE LINES 14-105

.. code-block:: default
   :lineno-start: 15


    # Libraries
    import favicon
    import subprocess as sp


    class IconHTML:
        """Class to display html in sphinx-gallery."""
        TMP0 = '<img src={url} style="{s}", width={w} height={h}>'
        TMP1 = '<div>'+TMP0+' <span>{name}</span></div>'

        """Class to display icons on sphinx-gallery."""
        def __init__(self, d, width=25, height=25, verbose=0):
            self.d = d
            self.width = width
            self.height = height
            self.style = "display: inline; vertical-align:middle;"
            self.verbose = verbose

        def _repr_html_short_(self):
            return ' '.join([self.TMP0.format(url=v,
                w=self.width, h=self.height, s=self.style)
                    for k,v in self.d.items()])

        def _repr_html_long_(self):
            return ' '.join([self.TMP1.format(url=v,
                w=self.width, h=self.height, s=self.style, name=k.lower())
                    for k, v in self.d.items()])

        def _repr_html_(self):
            if self.verbose == 0:
                return self._repr_html_short_()
            return self._repr_html_long_()


    # List of libraries for which the icon (if found)
    # should be included in the output.
    INCLUDE = [
        'pandas',
        'Flask',
        'imblearn',
        'numba',
        'numpy',
        'plotly',
        'PyYAML',
        'scipy',
        'seaborn',
        'statsmodels',
        'alabaster',
        'attrs',
        'Babel',
        'bokeh',
        'joblib',
        'nltk',
        'notebook',
        'torch',
        'matplotlib',
        'pillow',
        'pygments',
        'pytest',
        'tqdm',
        'urllib3',
        'future'
    ]

    # Define command to list packages and urls
    COMMAND = "pip list --format=freeze | cut -d= -f1 | xargs pip show | "
    COMMAND+= "awk '/^Name/{printf $2} /^Home-page/{print \": \"$2}'"

    # List of package name and url.
    output = sp.getoutput(COMMAND)

    # Show
    print("\nCommand output:")
    print(output)

    # Create dictionary
    d = {}
    for line in output.split("\n")[2:]:
        # Find name and url
        name, url = line.split(': ')
        if not url.startswith('https:'):
            continue
        if name not in INCLUDE:
            continue
        # Store name and url
        icons = favicon.get(url)
        for i, ico in enumerate(icons):
            d['%s-%s' % (name, i)] = ico.url






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Command output:
    'cut' is not recognized as an internal or external command,
    operable program or batch file.




.. GENERATED FROM PYTHON SOURCE LINES 107-110

.. code-block:: default
   :lineno-start: 107

    aux = IconHTML(d)
    aux






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">

    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 112-115

.. code-block:: default
   :lineno-start: 112

    aux = IconHTML(d, verbose=1)
    aux






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">

    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 117-130

.. code-block:: default
   :lineno-start: 118


    # Create dictionary
    d = {}
    for line in output.split("\n")[2:]:
        # Find name and url
        name, url = line.split(': ')
        if not url.startswith('https:'):
            continue
        # Store name and url
        icons = favicon.get(url)
        for i, ico in enumerate(icons):
            d['%s-%s' % (name, i)] = ico.url








.. GENERATED FROM PYTHON SOURCE LINES 132-133

.. code-block:: default
   :lineno-start: 132

    aux = IconHTML(d, verbose=1)
    aux




.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">

    </div>
    <br />
    <br />


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.150 seconds)


.. _sphx_glr_download__examples_utils_plot_favicons.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_favicons.py <plot_favicons.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_favicons.ipynb <plot_favicons.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
