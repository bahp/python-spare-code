
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples\other\plot_main02_favicons.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_other_plot_main02_favicons.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_other_plot_main02_favicons.py:


02. Visualizing Python Library Favicons
=======================================

This script identifies installed Python packages, fetches their homepage
URLs, and downloads their favicons. It then uses a custom HTML
representation to display these icons in a grid.

.. note:: The command ``cut`` is not available in windows! Thus, the
          code will not run in te standard Windows Command Prompt. However,
          it might be available on Cygwin o Git for windows.

.. note:: The visual output of this script is generated via a special
          _repr_html_() method. This method is automatically detected
          and rendered in rich display environments (Jupyter Notebook/Lab &
          IPython). If you run this as a regular .py file, no images will
          appear in your terminal. To see the output, you must manually get
           the HTML content and save it to a file:

.. GENERATED FROM PYTHON SOURCE LINES 20-152

.. code-block:: default
   :lineno-start: 21


    # Libraries
    import favicon
    import subprocess as sp


    class IconHTML:
        """Class to display html in sphinx-gallery."""
        TMP0 = '<img src={url} style="{s}", width={w} height={h}>'
        TMP1 = '<div>'+TMP0+' <span>{name}</span></div>'

        """Class to display icons on sphinx-gallery."""
        def __init__(self, d, width=25, height=25, verbose=0):
            self.d = d
            self.width = width
            self.height = height
            self.style = "display: inline; vertical-align:middle;"
            self.verbose = verbose

        def _repr_html_short_(self):
            return ' '.join([self.TMP0.format(url=v,
                w=self.width, h=self.height, s=self.style)
                    for k,v in self.d.items()])

        def _repr_html_long_(self):
            return ' '.join([self.TMP1.format(url=v,
                w=self.width, h=self.height, s=self.style, name=k.lower())
                    for k, v in self.d.items()])

        def _repr_html_(self):
            if self.verbose == 0:
                return self._repr_html_short_()
            return self._repr_html_long_()


    # List of libraries for which the icon (if found)
    # should be included in the output.
    INCLUDE = [
        'pandas',
        'Flask',
        'imblearn',
        'numba',
        'numpy',
        'plotly',
        'PyYAML',
        'scipy',
        'seaborn',
        'statsmodels',
        'alabaster',
        'attrs',
        'Babel',
        'bokeh',
        'joblib',
        'nltk',
        'notebook',
        'torch',
        'matplotlib',
        'pillow',
        'pygments',
        'pytest',
        'tqdm',
        'urllib3',
        'future'
    ]

    def list_packages_command():
        """List packages using linux <cut>."""
        # Define command to list packages and urls
        COMMAND = "pip list --format=freeze | cut -d= -f1 | xargs pip show | "
        COMMAND+= "awk '/^Name/{printf $2} /^Home-page/{print \": \"$2}'"
        # List of package name and url.
        output = sp.getoutput(COMMAND)
        # Return
        return output.split("\n")[2:]


    def list_packages_importlib():
        """List packages using importlib."""
        # --- ADD THIS NEW BLOCK ---
        import importlib.metadata

        lines = []
        # Iterate through all installed packages
        for dist in importlib.metadata.distributions():
            # Get package metadata
            meta = dist.metadata
            name = meta['Name']
            url = meta.get('Home-page', '')  # Use .get() for safety

            # Check if the package is in our include list and has a valid URL
            if name in INCLUDE and url.startswith('https'):
                lines.append(f"{name}: {url}")

        return lines



    import platform

    system = platform.system()

    if system == 'Windows':
        print("This is a Windows system.")
    elif system == 'Darwin':
        print("This is a macOS system.")
    elif system == 'Linux':
        print("This is a Linux system.")
    else:
        print(f"This is a different system: {system}")

    # Get packages
    packages = list_packages_importlib()

    # Show
    print("\nCommand output:")
    print(packages)

    # Create dictionary
    d = {}
    for line in packages:
        # Find name and url
        name, url = line.split(': ')
        if not url.startswith('https:'):
            continue
        if name not in INCLUDE:
            continue
        # Store name and url
        icons = favicon.get(url)
        for i, ico in enumerate(icons):
            d['%s-%s' % (name, i)] = ico.url






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    This is a Windows system.

    Command output:
    ['numba: https://numba.pydata.org', 'numpy: https://numpy.org', 'PyYAML: https://pyyaml.org/', 'statsmodels: https://www.statsmodels.org/', 'torch: https://pytorch.org/']




.. GENERATED FROM PYTHON SOURCE LINES 154-157

.. code-block:: default
   :lineno-start: 154

    aux = IconHTML(d)
    aux






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <img src=https://numba.pydata.org/_static/numba-blue-icon-rgb.svg style="display: inline; vertical-align:middle;", width=25 height=25> <img src=https://numba.pydata.org/_static/numba-blue-horizontal-rgb.svg style="display: inline; vertical-align:middle;", width=25 height=25> <img src=https://numpy.org/images/favicon.ico style="display: inline; vertical-align:middle;", width=25 height=25> <img src=https://pyyaml.org/favicon.ico style="display: inline; vertical-align:middle;", width=25 height=25> <img src=https://pytorch.org/wp-content/uploads/2024/10/cropped-favicon-270x270.webp style="display: inline; vertical-align:middle;", width=25 height=25> <img src=https://pytorch.org/wp-content/uploads/2024/10/cropped-favicon-192x192.webp style="display: inline; vertical-align:middle;", width=25 height=25> <img src=https://pytorch.org/wp-content/uploads/2024/10/cropped-favicon-180x180.webp style="display: inline; vertical-align:middle;", width=25 height=25> <img src=https://pytorch.org/wp-content/uploads/2024/10/cropped-favicon-32x32.webp style="display: inline; vertical-align:middle;", width=25 height=25> <img src=https://pytorch.org/wp-content/uploads/2025/01/pytorch_seo.png style="display: inline; vertical-align:middle;", width=25 height=25> <img src=https://pytorch.org/wp-content/uploads/2024/10/cropped-favicon-32x32.webp style="display: inline; vertical-align:middle;", width=25 height=25>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 159-162

.. code-block:: default
   :lineno-start: 159

    aux = IconHTML(d, verbose=1)
    aux






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div><img src=https://numba.pydata.org/_static/numba-blue-icon-rgb.svg style="display: inline; vertical-align:middle;", width=25 height=25> <span>numba-0</span></div> <div><img src=https://numba.pydata.org/_static/numba-blue-horizontal-rgb.svg style="display: inline; vertical-align:middle;", width=25 height=25> <span>numba-1</span></div> <div><img src=https://numpy.org/images/favicon.ico style="display: inline; vertical-align:middle;", width=25 height=25> <span>numpy-0</span></div> <div><img src=https://pyyaml.org/favicon.ico style="display: inline; vertical-align:middle;", width=25 height=25> <span>pyyaml-0</span></div> <div><img src=https://pytorch.org/wp-content/uploads/2024/10/cropped-favicon-270x270.webp style="display: inline; vertical-align:middle;", width=25 height=25> <span>torch-0</span></div> <div><img src=https://pytorch.org/wp-content/uploads/2024/10/cropped-favicon-192x192.webp style="display: inline; vertical-align:middle;", width=25 height=25> <span>torch-1</span></div> <div><img src=https://pytorch.org/wp-content/uploads/2024/10/cropped-favicon-180x180.webp style="display: inline; vertical-align:middle;", width=25 height=25> <span>torch-2</span></div> <div><img src=https://pytorch.org/wp-content/uploads/2024/10/cropped-favicon-32x32.webp style="display: inline; vertical-align:middle;", width=25 height=25> <span>torch-3</span></div> <div><img src=https://pytorch.org/wp-content/uploads/2025/01/pytorch_seo.png style="display: inline; vertical-align:middle;", width=25 height=25> <span>torch-4</span></div> <div><img src=https://pytorch.org/wp-content/uploads/2024/10/cropped-favicon-32x32.webp style="display: inline; vertical-align:middle;", width=25 height=25> <span>torch-5</span></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 164-177

.. code-block:: default
   :lineno-start: 165


    # Create dictionary
    d = {}
    for line in packages:
        # Find name and url
        name, url = line.split(': ')
        if not url.startswith('https:'):
            continue
        # Store name and url
        icons = favicon.get(url)
        for i, ico in enumerate(icons):
            d['%s-%s' % (name, i)] = ico.url








.. GENERATED FROM PYTHON SOURCE LINES 179-182

.. code-block:: default
   :lineno-start: 179

    aux = IconHTML(d, verbose=1)
    aux






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div><img src=https://numba.pydata.org/_static/numba-blue-icon-rgb.svg style="display: inline; vertical-align:middle;", width=25 height=25> <span>numba-0</span></div> <div><img src=https://numba.pydata.org/_static/numba-blue-horizontal-rgb.svg style="display: inline; vertical-align:middle;", width=25 height=25> <span>numba-1</span></div> <div><img src=https://numpy.org/images/favicon.ico style="display: inline; vertical-align:middle;", width=25 height=25> <span>numpy-0</span></div> <div><img src=https://pyyaml.org/favicon.ico style="display: inline; vertical-align:middle;", width=25 height=25> <span>pyyaml-0</span></div> <div><img src=https://pytorch.org/wp-content/uploads/2024/10/cropped-favicon-270x270.webp style="display: inline; vertical-align:middle;", width=25 height=25> <span>torch-0</span></div> <div><img src=https://pytorch.org/wp-content/uploads/2024/10/cropped-favicon-192x192.webp style="display: inline; vertical-align:middle;", width=25 height=25> <span>torch-1</span></div> <div><img src=https://pytorch.org/wp-content/uploads/2024/10/cropped-favicon-180x180.webp style="display: inline; vertical-align:middle;", width=25 height=25> <span>torch-2</span></div> <div><img src=https://pytorch.org/wp-content/uploads/2024/10/cropped-favicon-32x32.webp style="display: inline; vertical-align:middle;", width=25 height=25> <span>torch-3</span></div> <div><img src=https://pytorch.org/wp-content/uploads/2025/01/pytorch_seo.png style="display: inline; vertical-align:middle;", width=25 height=25> <span>torch-4</span></div> <div><img src=https://pytorch.org/wp-content/uploads/2024/10/cropped-favicon-32x32.webp style="display: inline; vertical-align:middle;", width=25 height=25> <span>torch-5</span></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 183-184

Write the string to a file

.. GENERATED FROM PYTHON SOURCE LINES 184-192

.. code-block:: default
   :lineno-start: 185


    #
    from pathlib import Path
    output_dir = Path('./objects/main02')
    output_dir.mkdir(parents=True, exist_ok=True)

    with open("%s/icons.html" % output_dir, "w") as f:
        f.write(aux._repr_html_())








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.264 seconds)


.. _sphx_glr_download__examples_other_plot_main02_favicons.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_main02_favicons.py <plot_main02_favicons.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_main02_favicons.ipynb <plot_main02_favicons.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
