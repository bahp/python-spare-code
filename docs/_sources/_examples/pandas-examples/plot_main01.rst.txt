
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples\pandas-examples\plot_main01.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_pandas-examples_plot_main01.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_pandas-examples_plot_main01.py:


Pandas - Main 01
================

.. GENERATED FROM PYTHON SOURCE LINES 5-41

.. code-block:: default
   :lineno-start: 6


    # Library
    import numpy as np
    import pandas as pd

    # Show in terminal
    TERMINAL = True

    # Create data
    data = [
        ['p1', '1/5/2021', 1, 2, 3],
        ['p1', '2/5/2021', 3, 3, 3],
        ['p1', '3/5/2021', 4, 4, 4],
        ['p1', '5/5/2021', 5, 5, 5],

        ['p2', '11/5/2021', 5, 3, 3],
        ['p2', '12/5/2021', 4, 3, None],
        ['p2', '16/5/2021', None, 1, None], # unordered
        ['p2', '15/5/2021', 5, 2, 4],
    ]

    # Load DataFrame
    data = pd.DataFrame(data,
        columns=['patient', 'date', 'plt', 'hct', 'bil'])

    # Format datetime
    # Date will be a datetime65[ns] instead of string
    data.date = pd.to_datetime(data.date, dayfirst=True)
    data.date = data.date.dt.normalize()

    # Show
    if TERMINAL:
        print("\nData:")
        print(data)
    data





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Data:
      patient       date  plt  hct  bil
    0      p1 2021-05-01  1.0    2  3.0
    1      p1 2021-05-02  3.0    3  3.0
    2      p1 2021-05-03  4.0    4  4.0
    3      p1 2021-05-05  5.0    5  5.0
    4      p2 2021-05-11  5.0    3  3.0
    5      p2 2021-05-12  4.0    3  NaN
    6      p2 2021-05-16  NaN    1  NaN
    7      p2 2021-05-15  5.0    2  4.0


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>patient</th>
          <th>date</th>
          <th>plt</th>
          <th>hct</th>
          <th>bil</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>p1</td>
          <td>2021-05-01</td>
          <td>1.0</td>
          <td>2</td>
          <td>3.0</td>
        </tr>
        <tr>
          <th>1</th>
          <td>p1</td>
          <td>2021-05-02</td>
          <td>3.0</td>
          <td>3</td>
          <td>3.0</td>
        </tr>
        <tr>
          <th>2</th>
          <td>p1</td>
          <td>2021-05-03</td>
          <td>4.0</td>
          <td>4</td>
          <td>4.0</td>
        </tr>
        <tr>
          <th>3</th>
          <td>p1</td>
          <td>2021-05-05</td>
          <td>5.0</td>
          <td>5</td>
          <td>5.0</td>
        </tr>
        <tr>
          <th>4</th>
          <td>p2</td>
          <td>2021-05-11</td>
          <td>5.0</td>
          <td>3</td>
          <td>3.0</td>
        </tr>
        <tr>
          <th>5</th>
          <td>p2</td>
          <td>2021-05-12</td>
          <td>4.0</td>
          <td>3</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>6</th>
          <td>p2</td>
          <td>2021-05-16</td>
          <td>NaN</td>
          <td>1</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>7</th>
          <td>p2</td>
          <td>2021-05-15</td>
          <td>5.0</td>
          <td>2</td>
          <td>4.0</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 42-43

Sort values

.. GENERATED FROM PYTHON SOURCE LINES 43-54

.. code-block:: default
   :lineno-start: 44


    # Note that if you set columns as indexes (e.g. the
    # datetime) they will be sorted by default.
    aux = data.sort_values(by=['plt', 'hct'])

    # Show
    if TERMINAL:
        print("\nOut:")
        print(aux)
    aux





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Out:
      patient       date  plt  hct  bil
    0      p1 2021-05-01  1.0    2  3.0
    1      p1 2021-05-02  3.0    3  3.0
    5      p2 2021-05-12  4.0    3  NaN
    2      p1 2021-05-03  4.0    4  4.0
    7      p2 2021-05-15  5.0    2  4.0
    4      p2 2021-05-11  5.0    3  3.0
    3      p1 2021-05-05  5.0    5  5.0
    6      p2 2021-05-16  NaN    1  NaN


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>patient</th>
          <th>date</th>
          <th>plt</th>
          <th>hct</th>
          <th>bil</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>p1</td>
          <td>2021-05-01</td>
          <td>1.0</td>
          <td>2</td>
          <td>3.0</td>
        </tr>
        <tr>
          <th>1</th>
          <td>p1</td>
          <td>2021-05-02</td>
          <td>3.0</td>
          <td>3</td>
          <td>3.0</td>
        </tr>
        <tr>
          <th>5</th>
          <td>p2</td>
          <td>2021-05-12</td>
          <td>4.0</td>
          <td>3</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>2</th>
          <td>p1</td>
          <td>2021-05-03</td>
          <td>4.0</td>
          <td>4</td>
          <td>4.0</td>
        </tr>
        <tr>
          <th>7</th>
          <td>p2</td>
          <td>2021-05-15</td>
          <td>5.0</td>
          <td>2</td>
          <td>4.0</td>
        </tr>
        <tr>
          <th>4</th>
          <td>p2</td>
          <td>2021-05-11</td>
          <td>5.0</td>
          <td>3</td>
          <td>3.0</td>
        </tr>
        <tr>
          <th>3</th>
          <td>p1</td>
          <td>2021-05-05</td>
          <td>5.0</td>
          <td>5</td>
          <td>5.0</td>
        </tr>
        <tr>
          <th>6</th>
          <td>p2</td>
          <td>2021-05-16</td>
          <td>NaN</td>
          <td>1</td>
          <td>NaN</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 55-56

Select columns

.. GENERATED FROM PYTHON SOURCE LINES 56-66

.. code-block:: default
   :lineno-start: 57


    # Select columns from DataFrame
    aux = data[['patient', 'date', 'plt']]

    # Show
    if TERMINAL:
        print("\nOut:")
        print(aux)
    aux





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Out:
      patient       date  plt
    0      p1 2021-05-01  1.0
    1      p1 2021-05-02  3.0
    2      p1 2021-05-03  4.0
    3      p1 2021-05-05  5.0
    4      p2 2021-05-11  5.0
    5      p2 2021-05-12  4.0
    6      p2 2021-05-16  NaN
    7      p2 2021-05-15  5.0


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>patient</th>
          <th>date</th>
          <th>plt</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>p1</td>
          <td>2021-05-01</td>
          <td>1.0</td>
        </tr>
        <tr>
          <th>1</th>
          <td>p1</td>
          <td>2021-05-02</td>
          <td>3.0</td>
        </tr>
        <tr>
          <th>2</th>
          <td>p1</td>
          <td>2021-05-03</td>
          <td>4.0</td>
        </tr>
        <tr>
          <th>3</th>
          <td>p1</td>
          <td>2021-05-05</td>
          <td>5.0</td>
        </tr>
        <tr>
          <th>4</th>
          <td>p2</td>
          <td>2021-05-11</td>
          <td>5.0</td>
        </tr>
        <tr>
          <th>5</th>
          <td>p2</td>
          <td>2021-05-12</td>
          <td>4.0</td>
        </tr>
        <tr>
          <th>6</th>
          <td>p2</td>
          <td>2021-05-16</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>7</th>
          <td>p2</td>
          <td>2021-05-15</td>
          <td>5.0</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 67-69

Indexing (not nan)


.. GENERATED FROM PYTHON SOURCE LINES 69-80

.. code-block:: default
   :lineno-start: 70


    # Keep rows where plt is not nan
    aux = data[data.plt.notna()]

    # Show
    if TERMINAL:
        print("\nOut:")
        print(aux)
    aux






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Out:
      patient       date  plt  hct  bil
    0      p1 2021-05-01  1.0    2  3.0
    1      p1 2021-05-02  3.0    3  3.0
    2      p1 2021-05-03  4.0    4  4.0
    3      p1 2021-05-05  5.0    5  5.0
    4      p2 2021-05-11  5.0    3  3.0
    5      p2 2021-05-12  4.0    3  NaN
    7      p2 2021-05-15  5.0    2  4.0


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>patient</th>
          <th>date</th>
          <th>plt</th>
          <th>hct</th>
          <th>bil</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>p1</td>
          <td>2021-05-01</td>
          <td>1.0</td>
          <td>2</td>
          <td>3.0</td>
        </tr>
        <tr>
          <th>1</th>
          <td>p1</td>
          <td>2021-05-02</td>
          <td>3.0</td>
          <td>3</td>
          <td>3.0</td>
        </tr>
        <tr>
          <th>2</th>
          <td>p1</td>
          <td>2021-05-03</td>
          <td>4.0</td>
          <td>4</td>
          <td>4.0</td>
        </tr>
        <tr>
          <th>3</th>
          <td>p1</td>
          <td>2021-05-05</td>
          <td>5.0</td>
          <td>5</td>
          <td>5.0</td>
        </tr>
        <tr>
          <th>4</th>
          <td>p2</td>
          <td>2021-05-11</td>
          <td>5.0</td>
          <td>3</td>
          <td>3.0</td>
        </tr>
        <tr>
          <th>5</th>
          <td>p2</td>
          <td>2021-05-12</td>
          <td>4.0</td>
          <td>3</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>7</th>
          <td>p2</td>
          <td>2021-05-15</td>
          <td>5.0</td>
          <td>2</td>
          <td>4.0</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 81-83

Drop nan (in subset)


.. GENERATED FROM PYTHON SOURCE LINES 83-94

.. code-block:: default
   :lineno-start: 84


    # Keep rows without any nan in subset
    aux = data.dropna(how='any', subset=['plt', 'bil'])

    # Show
    if TERMINAL:
        print("\nOut:")
        print(aux)
    aux






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Out:
      patient       date  plt  hct  bil
    0      p1 2021-05-01  1.0    2  3.0
    1      p1 2021-05-02  3.0    3  3.0
    2      p1 2021-05-03  4.0    4  4.0
    3      p1 2021-05-05  5.0    5  5.0
    4      p2 2021-05-11  5.0    3  3.0
    7      p2 2021-05-15  5.0    2  4.0


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>patient</th>
          <th>date</th>
          <th>plt</th>
          <th>hct</th>
          <th>bil</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>p1</td>
          <td>2021-05-01</td>
          <td>1.0</td>
          <td>2</td>
          <td>3.0</td>
        </tr>
        <tr>
          <th>1</th>
          <td>p1</td>
          <td>2021-05-02</td>
          <td>3.0</td>
          <td>3</td>
          <td>3.0</td>
        </tr>
        <tr>
          <th>2</th>
          <td>p1</td>
          <td>2021-05-03</td>
          <td>4.0</td>
          <td>4</td>
          <td>4.0</td>
        </tr>
        <tr>
          <th>3</th>
          <td>p1</td>
          <td>2021-05-05</td>
          <td>5.0</td>
          <td>5</td>
          <td>5.0</td>
        </tr>
        <tr>
          <th>4</th>
          <td>p2</td>
          <td>2021-05-11</td>
          <td>5.0</td>
          <td>3</td>
          <td>3.0</td>
        </tr>
        <tr>
          <th>7</th>
          <td>p2</td>
          <td>2021-05-15</td>
          <td>5.0</td>
          <td>2</td>
          <td>4.0</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 95-97

Drop nan (all)


.. GENERATED FROM PYTHON SOURCE LINES 97-107

.. code-block:: default
   :lineno-start: 98


    # Keep rows without any nan at all
    aux = data.dropna(how='any')

    # Show
    if TERMINAL:
        print("\nOut:")
        print(aux)
    aux





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Out:
      patient       date  plt  hct  bil
    0      p1 2021-05-01  1.0    2  3.0
    1      p1 2021-05-02  3.0    3  3.0
    2      p1 2021-05-03  4.0    4  4.0
    3      p1 2021-05-05  5.0    5  5.0
    4      p2 2021-05-11  5.0    3  3.0
    7      p2 2021-05-15  5.0    2  4.0


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>patient</th>
          <th>date</th>
          <th>plt</th>
          <th>hct</th>
          <th>bil</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>p1</td>
          <td>2021-05-01</td>
          <td>1.0</td>
          <td>2</td>
          <td>3.0</td>
        </tr>
        <tr>
          <th>1</th>
          <td>p1</td>
          <td>2021-05-02</td>
          <td>3.0</td>
          <td>3</td>
          <td>3.0</td>
        </tr>
        <tr>
          <th>2</th>
          <td>p1</td>
          <td>2021-05-03</td>
          <td>4.0</td>
          <td>4</td>
          <td>4.0</td>
        </tr>
        <tr>
          <th>3</th>
          <td>p1</td>
          <td>2021-05-05</td>
          <td>5.0</td>
          <td>5</td>
          <td>5.0</td>
        </tr>
        <tr>
          <th>4</th>
          <td>p2</td>
          <td>2021-05-11</td>
          <td>5.0</td>
          <td>3</td>
          <td>3.0</td>
        </tr>
        <tr>
          <th>7</th>
          <td>p2</td>
          <td>2021-05-15</td>
          <td>5.0</td>
          <td>2</td>
          <td>4.0</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 108-110

Resample daily


.. GENERATED FROM PYTHON SOURCE LINES 110-120

.. code-block:: default
   :lineno-start: 111


    # Resample
    aux = data.set_index('date').resample('D').asfreq()

    # Show
    if TERMINAL:
        print("\nOut:")
        print(aux)
    aux





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Out:
               patient  plt  hct  bil
    date                             
    2021-05-01      p1  1.0  2.0  3.0
    2021-05-02      p1  3.0  3.0  3.0
    2021-05-03      p1  4.0  4.0  4.0
    2021-05-04     NaN  NaN  NaN  NaN
    2021-05-05      p1  5.0  5.0  5.0
    2021-05-06     NaN  NaN  NaN  NaN
    2021-05-07     NaN  NaN  NaN  NaN
    2021-05-08     NaN  NaN  NaN  NaN
    2021-05-09     NaN  NaN  NaN  NaN
    2021-05-10     NaN  NaN  NaN  NaN
    2021-05-11      p2  5.0  3.0  3.0
    2021-05-12      p2  4.0  3.0  NaN
    2021-05-13     NaN  NaN  NaN  NaN
    2021-05-14     NaN  NaN  NaN  NaN
    2021-05-15      p2  5.0  2.0  4.0
    2021-05-16      p2  NaN  1.0  NaN


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>patient</th>
          <th>plt</th>
          <th>hct</th>
          <th>bil</th>
        </tr>
        <tr>
          <th>date</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>2021-05-01</th>
          <td>p1</td>
          <td>1.0</td>
          <td>2.0</td>
          <td>3.0</td>
        </tr>
        <tr>
          <th>2021-05-02</th>
          <td>p1</td>
          <td>3.0</td>
          <td>3.0</td>
          <td>3.0</td>
        </tr>
        <tr>
          <th>2021-05-03</th>
          <td>p1</td>
          <td>4.0</td>
          <td>4.0</td>
          <td>4.0</td>
        </tr>
        <tr>
          <th>2021-05-04</th>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>2021-05-05</th>
          <td>p1</td>
          <td>5.0</td>
          <td>5.0</td>
          <td>5.0</td>
        </tr>
        <tr>
          <th>2021-05-06</th>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>2021-05-07</th>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>2021-05-08</th>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>2021-05-09</th>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>2021-05-10</th>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>2021-05-11</th>
          <td>p2</td>
          <td>5.0</td>
          <td>3.0</td>
          <td>3.0</td>
        </tr>
        <tr>
          <th>2021-05-12</th>
          <td>p2</td>
          <td>4.0</td>
          <td>3.0</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>2021-05-13</th>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>2021-05-14</th>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>2021-05-15</th>
          <td>p2</td>
          <td>5.0</td>
          <td>2.0</td>
          <td>4.0</td>
        </tr>
        <tr>
          <th>2021-05-16</th>
          <td>p2</td>
          <td>NaN</td>
          <td>1.0</td>
          <td>NaN</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 121-123

Filling missing (pad)


.. GENERATED FROM PYTHON SOURCE LINES 123-133

.. code-block:: default
   :lineno-start: 124


    # Pad is synonym of DataFrame.fillna() with method='ffill'.
    aux = data.set_index('date').resample('D').asfreq().pad()

    # Show
    if TERMINAL:
        print("\nOut:")
        print(aux)
    aux





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Out:
               patient  plt  hct  bil
    date                             
    2021-05-01      p1  1.0  2.0  3.0
    2021-05-02      p1  3.0  3.0  3.0
    2021-05-03      p1  4.0  4.0  4.0
    2021-05-04      p1  4.0  4.0  4.0
    2021-05-05      p1  5.0  5.0  5.0
    2021-05-06      p1  5.0  5.0  5.0
    2021-05-07      p1  5.0  5.0  5.0
    2021-05-08      p1  5.0  5.0  5.0
    2021-05-09      p1  5.0  5.0  5.0
    2021-05-10      p1  5.0  5.0  5.0
    2021-05-11      p2  5.0  3.0  3.0
    2021-05-12      p2  4.0  3.0  3.0
    2021-05-13      p2  4.0  3.0  3.0
    2021-05-14      p2  4.0  3.0  3.0
    2021-05-15      p2  5.0  2.0  4.0
    2021-05-16      p2  5.0  1.0  4.0


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>patient</th>
          <th>plt</th>
          <th>hct</th>
          <th>bil</th>
        </tr>
        <tr>
          <th>date</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>2021-05-01</th>
          <td>p1</td>
          <td>1.0</td>
          <td>2.0</td>
          <td>3.0</td>
        </tr>
        <tr>
          <th>2021-05-02</th>
          <td>p1</td>
          <td>3.0</td>
          <td>3.0</td>
          <td>3.0</td>
        </tr>
        <tr>
          <th>2021-05-03</th>
          <td>p1</td>
          <td>4.0</td>
          <td>4.0</td>
          <td>4.0</td>
        </tr>
        <tr>
          <th>2021-05-04</th>
          <td>p1</td>
          <td>4.0</td>
          <td>4.0</td>
          <td>4.0</td>
        </tr>
        <tr>
          <th>2021-05-05</th>
          <td>p1</td>
          <td>5.0</td>
          <td>5.0</td>
          <td>5.0</td>
        </tr>
        <tr>
          <th>2021-05-06</th>
          <td>p1</td>
          <td>5.0</td>
          <td>5.0</td>
          <td>5.0</td>
        </tr>
        <tr>
          <th>2021-05-07</th>
          <td>p1</td>
          <td>5.0</td>
          <td>5.0</td>
          <td>5.0</td>
        </tr>
        <tr>
          <th>2021-05-08</th>
          <td>p1</td>
          <td>5.0</td>
          <td>5.0</td>
          <td>5.0</td>
        </tr>
        <tr>
          <th>2021-05-09</th>
          <td>p1</td>
          <td>5.0</td>
          <td>5.0</td>
          <td>5.0</td>
        </tr>
        <tr>
          <th>2021-05-10</th>
          <td>p1</td>
          <td>5.0</td>
          <td>5.0</td>
          <td>5.0</td>
        </tr>
        <tr>
          <th>2021-05-11</th>
          <td>p2</td>
          <td>5.0</td>
          <td>3.0</td>
          <td>3.0</td>
        </tr>
        <tr>
          <th>2021-05-12</th>
          <td>p2</td>
          <td>4.0</td>
          <td>3.0</td>
          <td>3.0</td>
        </tr>
        <tr>
          <th>2021-05-13</th>
          <td>p2</td>
          <td>4.0</td>
          <td>3.0</td>
          <td>3.0</td>
        </tr>
        <tr>
          <th>2021-05-14</th>
          <td>p2</td>
          <td>4.0</td>
          <td>3.0</td>
          <td>3.0</td>
        </tr>
        <tr>
          <th>2021-05-15</th>
          <td>p2</td>
          <td>5.0</td>
          <td>2.0</td>
          <td>4.0</td>
        </tr>
        <tr>
          <th>2021-05-16</th>
          <td>p2</td>
          <td>5.0</td>
          <td>1.0</td>
          <td>4.0</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 134-135

Group by patient and sum

.. GENERATED FROM PYTHON SOURCE LINES 135-145

.. code-block:: default
   :lineno-start: 136


    # Group by patient and sum
    agg = aux.groupby('patient').sum()

    # Show
    if TERMINAL:
        print("\nOut:")
        print(agg)
    agg





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Out:
              plt   hct   bil
    patient                  
    p1       42.0  43.0  44.0
    p2       27.0  15.0  20.0


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>plt</th>
          <th>hct</th>
          <th>bil</th>
        </tr>
        <tr>
          <th>patient</th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>p1</th>
          <td>42.0</td>
          <td>43.0</td>
          <td>44.0</td>
        </tr>
        <tr>
          <th>p2</th>
          <td>27.0</td>
          <td>15.0</td>
          <td>20.0</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 146-147

Group by patient (2days) and ..

.. GENERATED FROM PYTHON SOURCE LINES 147-183

.. code-block:: default
   :lineno-start: 148


    agg = aux.groupby(by=['patient', pd.Grouper(freq='2D')]) \
        .agg('mean', 'max')
        #.agg({'idx': ['first', 'last'],
        #      0: [skew, kurtosis, own],
        #      1: [skew, kurtosis, own],
        #      '0_hr': [own],
        #      '0_rr': [own]})

    # Show
    if TERMINAL:
        print("\nOut:")
        print(agg)
    agg


    def f(x):
        print(x)

    #agg = aux.groupby(by='patient').rolling(2).apply(f)
    #print(agg)




    """#https://stackoverflow.com/questions/39674713/neural-network-lstm-input-shape-from-dataframe
    # Put your inputs into a single list
    aux = data.copy(deep=True)
    aux['single_input_vector'] = aux[['hct', 'plt']].apply(tuple, axis=1).apply(list)
    # Double-encapsulate list so that you can sum it in the next step and keep time steps as separate elements
    aux['single_input_vector'] = aux.single_input_vector.apply(lambda x: [list(x)])
    # Use .cumsum() to include previous row vectors in the current row list of vectors
    aux['cumulative_input_vectors'] = aux.single_input_vector.cumsum()
    # If your output is multi-dimensional, you need to capture those dimensions in one object
    # If your output is a single dimension, this step may be unnecessary
    aux['output_vector'] = aux[['bil']].apply(tuple, axis=1).apply(list)
    print(aux)"""



.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Out:
                        plt  hct  bil
    patient date                     
    p1      2021-05-01  2.0  2.5  3.0
            2021-05-03  4.0  4.0  4.0
            2021-05-05  5.0  5.0  5.0
            2021-05-07  5.0  5.0  5.0
            2021-05-09  5.0  5.0  5.0
    p2      2021-05-11  4.5  3.0  3.0
            2021-05-13  4.0  3.0  3.0
            2021-05-15  5.0  1.5  4.0

    "#https://stackoverflow.com/questions/39674713/neural-network-lstm-input-shape-from-dataframe\n# Put your inputs into a single list\naux = data.copy(deep=True)\naux['single_input_vector'] = aux[['hct', 'plt']].apply(tuple, axis=1).apply(list)\n# Double-encapsulate list so that you can sum it in the next step and keep time steps as separate elements\naux['single_input_vector'] = aux.single_input_vector.apply(lambda x: [list(x)])\n# Use .cumsum() to include previous row vectors in the current row list of vectors\naux['cumulative_input_vectors'] = aux.single_input_vector.cumsum()\n# If your output is multi-dimensional, you need to capture those dimensions in one object\n# If your output is a single dimension, this step may be unnecessary\naux['output_vector'] = aux[['bil']].apply(tuple, axis=1).apply(list)\nprint(aux)"




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.104 seconds)


.. _sphx_glr_download__examples_pandas-examples_plot_main01.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_main01.py <plot_main01.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_main01.ipynb <plot_main01.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
