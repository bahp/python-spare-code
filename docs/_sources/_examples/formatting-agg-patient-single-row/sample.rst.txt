
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples\formatting-agg-patient-single-row\sample.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_formatting-agg-patient-single-row_sample.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_formatting-agg-patient-single-row_sample.py:


Sample
=============

Example

.. GENERATED FROM PYTHON SOURCE LINES 7-93

.. code-block:: default
   :lineno-start: 8


    # Generic
    import warnings
    import pandas as pd 

    # Ignore warnings
    warnings.simplefilter("ignore")

    # -----------------------
    # Read data
    # -----------------------
    # Read data
    data = pd.read_csv('./laboratory.csv', parse_dates=['date'])

    # Show data
    print(data.columns)



    # -----------------------
    # Format
    # -----------------------
    # Configuration
    show_progress_every = 10 # Number of patients
    break_loop_after = 100  # Number of patients or None

    # Create empty outcome
    results = pd.DataFrame()

    # Groups
    groups = data.groupby(by='id')

    # Step by step (16270 groups!)
    for i, (k, g) in enumerate(groups):
    	# Show information
    	if (i % show_progress_every) == 0:
    		print("%5s/%5s. Patient '%s'" % (i+1, len(groups), k))

    	# Show dataframe
    	#print(g)

    	# Sort by dates (if needed)

    	# Fill empty values
    	#g.fillna(method='backfill', inplace=True)

    	# Compute statistics
    	# ------------------
    	# .. note: Forward/backward filling does not affect
    	#          the max/min but it affects the mean or
    	#          median.
    	#
    	# .. note: You could also create a map with all the 
    	#          functions you want to apply instead of 
    	#          using describe. This is useful if you need 
    	#          specific stats

    	# Get the common stats
    	#d = g.describe()

    	# Get specific stats for all columns	
    	d = g.agg({c: ['max', 'min'] for c in g.columns})

    	# Stack the describe outcome 
    	d = d.stack()
    	d.index = ['_'.join(e) for e in d.index.tolist()]
    	d['id'] = k                  # patient identifier
    	d['date'] = min(g['date'])   # admission date

    	# Append result
    	results = results.append(d, ignore_index=True)

    	# Break clause for testing
    	#if break_loop_after is not None:
    	if i==break_loop_after:
    		break


    # Show columns
    print(results.columns.values)

    # Show results (partially)
    print(results[['id', 'date', 'max_wcc']])

    # .. note: Once it works as you want, you can try to do it
    #          in one single line and compare the results to 
    #          verify that it is correct.

.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download__examples_formatting-agg-patient-single-row_sample.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: sample.py <sample.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: sample.ipynb <sample.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
